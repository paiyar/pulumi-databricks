// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks.Outputs
{

    [OutputType]
    public sealed class JobTask
    {
        public readonly Outputs.JobTaskDbtTask? DbtTask;
        public readonly ImmutableArray<Outputs.JobTaskDependsOn> DependsOns;
        public readonly string? Description;
        public readonly Outputs.JobTaskEmailNotifications? EmailNotifications;
        public readonly string? ExistingClusterId;
        public readonly string? JobClusterKey;
        public readonly ImmutableArray<Outputs.JobTaskLibrary> Libraries;
        public readonly int? MaxRetries;
        public readonly int? MinRetryIntervalMillis;
        public readonly Outputs.JobTaskNewCluster? NewCluster;
        public readonly Outputs.JobTaskNotebookTask? NotebookTask;
        public readonly Outputs.JobTaskPipelineTask? PipelineTask;
        public readonly Outputs.JobTaskPythonWheelTask? PythonWheelTask;
        public readonly bool? RetryOnTimeout;
        public readonly Outputs.JobTaskSparkJarTask? SparkJarTask;
        public readonly Outputs.JobTaskSparkPythonTask? SparkPythonTask;
        public readonly Outputs.JobTaskSparkSubmitTask? SparkSubmitTask;
        public readonly Outputs.JobTaskSqlTask? SqlTask;
        public readonly string? TaskKey;
        public readonly int? TimeoutSeconds;

        [OutputConstructor]
        private JobTask(
            Outputs.JobTaskDbtTask? dbtTask,

            ImmutableArray<Outputs.JobTaskDependsOn> dependsOns,

            string? description,

            Outputs.JobTaskEmailNotifications? emailNotifications,

            string? existingClusterId,

            string? jobClusterKey,

            ImmutableArray<Outputs.JobTaskLibrary> libraries,

            int? maxRetries,

            int? minRetryIntervalMillis,

            Outputs.JobTaskNewCluster? newCluster,

            Outputs.JobTaskNotebookTask? notebookTask,

            Outputs.JobTaskPipelineTask? pipelineTask,

            Outputs.JobTaskPythonWheelTask? pythonWheelTask,

            bool? retryOnTimeout,

            Outputs.JobTaskSparkJarTask? sparkJarTask,

            Outputs.JobTaskSparkPythonTask? sparkPythonTask,

            Outputs.JobTaskSparkSubmitTask? sparkSubmitTask,

            Outputs.JobTaskSqlTask? sqlTask,

            string? taskKey,

            int? timeoutSeconds)
        {
            DbtTask = dbtTask;
            DependsOns = dependsOns;
            Description = description;
            EmailNotifications = emailNotifications;
            ExistingClusterId = existingClusterId;
            JobClusterKey = jobClusterKey;
            Libraries = libraries;
            MaxRetries = maxRetries;
            MinRetryIntervalMillis = minRetryIntervalMillis;
            NewCluster = newCluster;
            NotebookTask = notebookTask;
            PipelineTask = pipelineTask;
            PythonWheelTask = pythonWheelTask;
            RetryOnTimeout = retryOnTimeout;
            SparkJarTask = sparkJarTask;
            SparkPythonTask = sparkPythonTask;
            SparkSubmitTask = sparkSubmitTask;
            SqlTask = sqlTask;
            TaskKey = taskKey;
            TimeoutSeconds = timeoutSeconds;
        }
    }
}
