// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    /// <summary>
    /// &gt; **Private Preview** This feature is in [Private Preview](https://docs.databricks.com/release-notes/release-types.html). Contact your Databricks representative to request access.
    /// 
    /// A metastore is the top-level container of objects in Unity Catalog. It stores data assets (tables and views) and the permissions that govern access to them. Databricks account admins can create metastores and assign them to Databricks workspaces in order to control which workloads use each metastore.
    /// 
    /// Unity Catalog offers a new metastore with built in security and auditing. This is distinct to the metastore used in previous versions of Databricks (based on the Hive Metastore).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var thisMetastore = new Databricks.Metastore("thisMetastore", new Databricks.MetastoreArgs
    ///         {
    ///             StorageRoot = $"s3://{aws_s3_bucket.Metastore.Id}/metastore",
    ///             Owner = "uc admins",
    ///             ForceDestroy = true,
    ///         });
    ///         var thisMetastoreAssignment = new Databricks.MetastoreAssignment("thisMetastoreAssignment", new Databricks.MetastoreAssignmentArgs
    ///         {
    ///             MetastoreId = thisMetastore.Id,
    ///             WorkspaceId = local.Workspace_id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// This resource can be imported by IDbash
    /// 
    /// ```sh
    ///  $ pulumi import databricks:index/metastore:Metastore this &lt;id&gt;
    /// ```
    /// </summary>
    [DatabricksResourceType("databricks:index/metastore:Metastore")]
    public partial class Metastore : Pulumi.CustomResource
    {
        [Output("defaultDataAccessConfigId")]
        public Output<string?> DefaultDataAccessConfigId { get; private set; } = null!;

        /// <summary>
        /// Destroy metastore regardless of its contents.
        /// </summary>
        [Output("forceDestroy")]
        public Output<bool?> ForceDestroy { get; private set; } = null!;

        /// <summary>
        /// Name of metastore.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Username/groupname of Metastore owner.
        /// </summary>
        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;

        /// <summary>
        /// Path on cloud storage account, where managed databricks.Table are stored. Change forces creation of a new resource.
        /// </summary>
        [Output("storageRoot")]
        public Output<string> StorageRoot { get; private set; } = null!;


        /// <summary>
        /// Create a Metastore resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Metastore(string name, MetastoreArgs args, CustomResourceOptions? options = null)
            : base("databricks:index/metastore:Metastore", name, args ?? new MetastoreArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Metastore(string name, Input<string> id, MetastoreState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/metastore:Metastore", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Metastore resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Metastore Get(string name, Input<string> id, MetastoreState? state = null, CustomResourceOptions? options = null)
        {
            return new Metastore(name, id, state, options);
        }
    }

    public sealed class MetastoreArgs : Pulumi.ResourceArgs
    {
        [Input("defaultDataAccessConfigId")]
        public Input<string>? DefaultDataAccessConfigId { get; set; }

        /// <summary>
        /// Destroy metastore regardless of its contents.
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        /// <summary>
        /// Name of metastore.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Username/groupname of Metastore owner.
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// Path on cloud storage account, where managed databricks.Table are stored. Change forces creation of a new resource.
        /// </summary>
        [Input("storageRoot", required: true)]
        public Input<string> StorageRoot { get; set; } = null!;

        public MetastoreArgs()
        {
        }
    }

    public sealed class MetastoreState : Pulumi.ResourceArgs
    {
        [Input("defaultDataAccessConfigId")]
        public Input<string>? DefaultDataAccessConfigId { get; set; }

        /// <summary>
        /// Destroy metastore regardless of its contents.
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        /// <summary>
        /// Name of metastore.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Username/groupname of Metastore owner.
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// Path on cloud storage account, where managed databricks.Table are stored. Change forces creation of a new resource.
        /// </summary>
        [Input("storageRoot")]
        public Input<string>? StorageRoot { get; set; }

        public MetastoreState()
        {
        }
    }
}
