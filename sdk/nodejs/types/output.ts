// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface ClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface ClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface ClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface ClusterClusterLogConf {
    dbfs?: outputs.ClusterClusterLogConfDbfs;
    s3?: outputs.ClusterClusterLogConfS3;
}

export interface ClusterClusterLogConfDbfs {
    destination: string;
}

export interface ClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface ClusterDockerImage {
    basicAuth?: outputs.ClusterDockerImageBasicAuth;
    url: string;
}

export interface ClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface ClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface ClusterInitScript {
    dbfs?: outputs.ClusterInitScriptDbfs;
    file?: outputs.ClusterInitScriptFile;
    gcs?: outputs.ClusterInitScriptGcs;
    s3?: outputs.ClusterInitScriptS3;
}

export interface ClusterInitScriptDbfs {
    destination: string;
}

export interface ClusterInitScriptFile {
    destination?: string;
}

export interface ClusterInitScriptGcs {
    destination?: string;
}

export interface ClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface ClusterLibrary {
    cran?: outputs.ClusterLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.ClusterLibraryMaven;
    pypi?: outputs.ClusterLibraryPypi;
    whl?: string;
}

export interface ClusterLibraryCran {
    package: string;
    repo?: string;
}

export interface ClusterLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface ClusterLibraryPypi {
    package: string;
    repo?: string;
}

export interface ClusterWorkloadType {
    clients: outputs.ClusterWorkloadTypeClients;
}

export interface ClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface GetClusterClusterInfo {
    autoscale?: outputs.GetClusterClusterInfoAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: outputs.GetClusterClusterInfoAwsAttributes;
    azureAttributes?: outputs.GetClusterClusterInfoAzureAttributes;
    clusterCores?: number;
    clusterId?: string;
    clusterLogConf?: outputs.GetClusterClusterInfoClusterLogConf;
    clusterLogStatus?: outputs.GetClusterClusterInfoClusterLogStatus;
    clusterMemoryMb?: number;
    clusterName?: string;
    clusterSource?: string;
    creatorUserName?: string;
    customTags?: {[key: string]: any};
    dataSecurityMode?: string;
    defaultTags: {[key: string]: any};
    dockerImage?: outputs.GetClusterClusterInfoDockerImage;
    driver?: outputs.GetClusterClusterInfoDriver;
    driverInstancePoolId: string;
    driverNodeTypeId?: string;
    enableElasticDisk?: boolean;
    enableLocalDiskEncryption?: boolean;
    executors?: outputs.GetClusterClusterInfoExecutor[];
    gcpAttributes?: outputs.GetClusterClusterInfoGcpAttributes;
    initScripts?: outputs.GetClusterClusterInfoInitScript[];
    instancePoolId?: string;
    jdbcPort?: number;
    lastActivityTime?: number;
    lastStateLossTime?: number;
    nodeTypeId?: string;
    numWorkers?: number;
    policyId?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: any};
    sparkContextId?: number;
    sparkEnvVars?: {[key: string]: any};
    sparkVersion: string;
    sshPublicKeys?: string[];
    startTime?: number;
    state: string;
    stateMessage?: string;
    terminateTime?: number;
    terminationReason?: outputs.GetClusterClusterInfoTerminationReason;
}

export interface GetClusterClusterInfoAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface GetClusterClusterInfoAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface GetClusterClusterInfoAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface GetClusterClusterInfoClusterLogConf {
    dbfs?: outputs.GetClusterClusterInfoClusterLogConfDbfs;
    s3?: outputs.GetClusterClusterInfoClusterLogConfS3;
}

export interface GetClusterClusterInfoClusterLogConfDbfs {
    destination: string;
}

export interface GetClusterClusterInfoClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetClusterClusterInfoClusterLogStatus {
    lastAttempted?: number;
    lastException?: string;
}

export interface GetClusterClusterInfoDockerImage {
    basicAuth?: outputs.GetClusterClusterInfoDockerImageBasicAuth;
    url: string;
}

export interface GetClusterClusterInfoDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface GetClusterClusterInfoDriver {
    hostPrivateIp?: string;
    instanceId?: string;
    nodeAwsAttributes?: outputs.GetClusterClusterInfoDriverNodeAwsAttributes;
    nodeId?: string;
    privateIp?: string;
    publicDns?: string;
    startTimestamp?: number;
}

export interface GetClusterClusterInfoDriverNodeAwsAttributes {
    isSpot?: boolean;
}

export interface GetClusterClusterInfoExecutor {
    hostPrivateIp?: string;
    instanceId?: string;
    nodeAwsAttributes?: outputs.GetClusterClusterInfoExecutorNodeAwsAttributes;
    nodeId?: string;
    privateIp?: string;
    publicDns?: string;
    startTimestamp?: number;
}

export interface GetClusterClusterInfoExecutorNodeAwsAttributes {
    isSpot?: boolean;
}

export interface GetClusterClusterInfoGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface GetClusterClusterInfoInitScript {
    dbfs?: outputs.GetClusterClusterInfoInitScriptDbfs;
    s3?: outputs.GetClusterClusterInfoInitScriptS3;
}

export interface GetClusterClusterInfoInitScriptDbfs {
    destination: string;
}

export interface GetClusterClusterInfoInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetClusterClusterInfoTerminationReason {
    code?: string;
    parameters?: {[key: string]: any};
    type?: string;
}

export interface GetDbfsFilePathsPathList {
    fileSize?: number;
    path?: string;
}

export interface GetNotebookPathsNotebookPathList {
    language?: string;
    path?: string;
}

export interface GetSqlWarehouseChannel {
    name?: string;
}

export interface GetSqlWarehouseOdbcParams {
    host?: string;
    hostname?: string;
    path: string;
    port: number;
    protocol: string;
}

export interface GetSqlWarehouseTags {
    customTags: outputs.GetSqlWarehouseTagsCustomTag[];
}

export interface GetSqlWarehouseTagsCustomTag {
    key: string;
    value: string;
}

export interface GrantsGrant {
    principal: string;
    privileges: string[];
}

export interface InstancePoolAwsAttributes {
    availability?: string;
    spotBidPricePercent?: number;
    zoneId: string;
}

export interface InstancePoolAzureAttributes {
    availability?: string;
    spotBidMaxPrice?: number;
}

export interface InstancePoolDiskSpec {
    diskCount?: number;
    diskSize?: number;
    diskType?: outputs.InstancePoolDiskSpecDiskType;
}

export interface InstancePoolDiskSpecDiskType {
    azureDiskVolumeType?: string;
    ebsVolumeType?: string;
}

export interface InstancePoolGcpAttributes {
    availability?: string;
}

export interface InstancePoolInstancePoolFleetAttributes {
    fleetOnDemandOption?: outputs.InstancePoolInstancePoolFleetAttributesFleetOnDemandOption;
    fleetSpotOption?: outputs.InstancePoolInstancePoolFleetAttributesFleetSpotOption;
    launchTemplateOverrides: outputs.InstancePoolInstancePoolFleetAttributesLaunchTemplateOverride[];
}

export interface InstancePoolInstancePoolFleetAttributesFleetOnDemandOption {
    allocationStrategy: string;
    instancePoolsToUseCount?: number;
}

export interface InstancePoolInstancePoolFleetAttributesFleetSpotOption {
    allocationStrategy: string;
    instancePoolsToUseCount?: number;
}

export interface InstancePoolInstancePoolFleetAttributesLaunchTemplateOverride {
    availabilityZone: string;
    instanceType: string;
}

export interface InstancePoolPreloadedDockerImage {
    basicAuth?: outputs.InstancePoolPreloadedDockerImageBasicAuth;
    url: string;
}

export interface InstancePoolPreloadedDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface JobEmailNotifications {
    alertOnLastAttempt?: boolean;
    noAlertForSkippedRuns?: boolean;
    onFailures?: string[];
    onStarts?: string[];
    onSuccesses?: string[];
}

export interface JobGitSource {
    branch?: string;
    commit?: string;
    provider?: string;
    tag?: string;
    url: string;
}

export interface JobJobCluster {
    jobClusterKey?: string;
    newCluster?: outputs.JobJobClusterNewCluster;
}

export interface JobJobClusterNewCluster {
    autoscale?: outputs.JobJobClusterNewClusterAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: outputs.JobJobClusterNewClusterAwsAttributes;
    azureAttributes?: outputs.JobJobClusterNewClusterAzureAttributes;
    clusterId?: string;
    clusterLogConf?: outputs.JobJobClusterNewClusterClusterLogConf;
    clusterName?: string;
    customTags?: {[key: string]: any};
    dataSecurityMode?: string;
    dockerImage?: outputs.JobJobClusterNewClusterDockerImage;
    driverInstancePoolId: string;
    driverNodeTypeId: string;
    enableElasticDisk: boolean;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.JobJobClusterNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: outputs.JobJobClusterNewClusterInitScript[];
    instancePoolId?: string;
    nodeTypeId: string;
    numWorkers?: number;
    policyId?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: any};
    sparkEnvVars?: {[key: string]: any};
    sparkVersion: string;
    sshPublicKeys?: string[];
    workloadType?: outputs.JobJobClusterNewClusterWorkloadType;
}

export interface JobJobClusterNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface JobJobClusterNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface JobJobClusterNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface JobJobClusterNewClusterClusterLogConf {
    dbfs?: outputs.JobJobClusterNewClusterClusterLogConfDbfs;
    s3?: outputs.JobJobClusterNewClusterClusterLogConfS3;
}

export interface JobJobClusterNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface JobJobClusterNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobJobClusterNewClusterDockerImage {
    basicAuth?: outputs.JobJobClusterNewClusterDockerImageBasicAuth;
    url: string;
}

export interface JobJobClusterNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface JobJobClusterNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface JobJobClusterNewClusterInitScript {
    dbfs?: outputs.JobJobClusterNewClusterInitScriptDbfs;
    file?: outputs.JobJobClusterNewClusterInitScriptFile;
    gcs?: outputs.JobJobClusterNewClusterInitScriptGcs;
    s3?: outputs.JobJobClusterNewClusterInitScriptS3;
}

export interface JobJobClusterNewClusterInitScriptDbfs {
    destination: string;
}

export interface JobJobClusterNewClusterInitScriptFile {
    destination?: string;
}

export interface JobJobClusterNewClusterInitScriptGcs {
    destination?: string;
}

export interface JobJobClusterNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobJobClusterNewClusterWorkloadType {
    clients: outputs.JobJobClusterNewClusterWorkloadTypeClients;
}

export interface JobJobClusterNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface JobLibrary {
    cran?: outputs.JobLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.JobLibraryMaven;
    pypi?: outputs.JobLibraryPypi;
    whl?: string;
}

export interface JobLibraryCran {
    package: string;
    repo?: string;
}

export interface JobLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface JobLibraryPypi {
    package: string;
    repo?: string;
}

export interface JobNewCluster {
    autoscale?: outputs.JobNewClusterAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: outputs.JobNewClusterAwsAttributes;
    azureAttributes?: outputs.JobNewClusterAzureAttributes;
    clusterId?: string;
    clusterLogConf?: outputs.JobNewClusterClusterLogConf;
    clusterName?: string;
    customTags?: {[key: string]: any};
    dataSecurityMode?: string;
    dockerImage?: outputs.JobNewClusterDockerImage;
    driverInstancePoolId: string;
    driverNodeTypeId: string;
    enableElasticDisk: boolean;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.JobNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: outputs.JobNewClusterInitScript[];
    instancePoolId?: string;
    nodeTypeId: string;
    numWorkers?: number;
    policyId?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: any};
    sparkEnvVars?: {[key: string]: any};
    sparkVersion: string;
    sshPublicKeys?: string[];
    workloadType?: outputs.JobNewClusterWorkloadType;
}

export interface JobNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface JobNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface JobNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface JobNewClusterClusterLogConf {
    dbfs?: outputs.JobNewClusterClusterLogConfDbfs;
    s3?: outputs.JobNewClusterClusterLogConfS3;
}

export interface JobNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface JobNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobNewClusterDockerImage {
    basicAuth?: outputs.JobNewClusterDockerImageBasicAuth;
    url: string;
}

export interface JobNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface JobNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface JobNewClusterInitScript {
    dbfs?: outputs.JobNewClusterInitScriptDbfs;
    file?: outputs.JobNewClusterInitScriptFile;
    gcs?: outputs.JobNewClusterInitScriptGcs;
    s3?: outputs.JobNewClusterInitScriptS3;
}

export interface JobNewClusterInitScriptDbfs {
    destination: string;
}

export interface JobNewClusterInitScriptFile {
    destination?: string;
}

export interface JobNewClusterInitScriptGcs {
    destination?: string;
}

export interface JobNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobNewClusterWorkloadType {
    clients: outputs.JobNewClusterWorkloadTypeClients;
}

export interface JobNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface JobNotebookTask {
    baseParameters?: {[key: string]: any};
    notebookPath: string;
}

export interface JobPipelineTask {
    pipelineId: string;
}

export interface JobPythonWheelTask {
    entryPoint?: string;
    namedParameters?: {[key: string]: any};
    packageName?: string;
    parameters?: string[];
}

export interface JobSchedule {
    pauseStatus: string;
    quartzCronExpression: string;
    timezoneId: string;
}

export interface JobSparkJarTask {
    jarUri?: string;
    mainClassName?: string;
    parameters?: string[];
}

export interface JobSparkPythonTask {
    parameters?: string[];
    pythonFile: string;
}

export interface JobSparkSubmitTask {
    parameters?: string[];
}

export interface JobTask {
    dbtTask?: outputs.JobTaskDbtTask;
    dependsOns?: outputs.JobTaskDependsOn[];
    description?: string;
    emailNotifications?: outputs.JobTaskEmailNotifications;
    existingClusterId?: string;
    jobClusterKey?: string;
    libraries?: outputs.JobTaskLibrary[];
    maxRetries?: number;
    minRetryIntervalMillis?: number;
    newCluster?: outputs.JobTaskNewCluster;
    notebookTask?: outputs.JobTaskNotebookTask;
    pipelineTask?: outputs.JobTaskPipelineTask;
    pythonWheelTask?: outputs.JobTaskPythonWheelTask;
    retryOnTimeout: boolean;
    sparkJarTask?: outputs.JobTaskSparkJarTask;
    sparkPythonTask?: outputs.JobTaskSparkPythonTask;
    sparkSubmitTask?: outputs.JobTaskSparkSubmitTask;
    sqlTask?: outputs.JobTaskSqlTask;
    taskKey?: string;
    timeoutSeconds?: number;
}

export interface JobTaskDbtTask {
    commands: string[];
    projectDirectory?: string;
    schema?: string;
}

export interface JobTaskDependsOn {
    taskKey?: string;
}

export interface JobTaskEmailNotifications {
    alertOnLastAttempt?: boolean;
    noAlertForSkippedRuns?: boolean;
    onFailures?: string[];
    onStarts?: string[];
    onSuccesses?: string[];
}

export interface JobTaskLibrary {
    cran?: outputs.JobTaskLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.JobTaskLibraryMaven;
    pypi?: outputs.JobTaskLibraryPypi;
    whl?: string;
}

export interface JobTaskLibraryCran {
    package: string;
    repo?: string;
}

export interface JobTaskLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface JobTaskLibraryPypi {
    package: string;
    repo?: string;
}

export interface JobTaskNewCluster {
    autoscale?: outputs.JobTaskNewClusterAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: outputs.JobTaskNewClusterAwsAttributes;
    azureAttributes?: outputs.JobTaskNewClusterAzureAttributes;
    clusterId?: string;
    clusterLogConf?: outputs.JobTaskNewClusterClusterLogConf;
    clusterName?: string;
    customTags?: {[key: string]: any};
    dataSecurityMode?: string;
    dockerImage?: outputs.JobTaskNewClusterDockerImage;
    driverInstancePoolId: string;
    driverNodeTypeId: string;
    enableElasticDisk: boolean;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.JobTaskNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: outputs.JobTaskNewClusterInitScript[];
    instancePoolId?: string;
    nodeTypeId: string;
    numWorkers?: number;
    policyId?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: any};
    sparkEnvVars?: {[key: string]: any};
    sparkVersion: string;
    sshPublicKeys?: string[];
    workloadType?: outputs.JobTaskNewClusterWorkloadType;
}

export interface JobTaskNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface JobTaskNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface JobTaskNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface JobTaskNewClusterClusterLogConf {
    dbfs?: outputs.JobTaskNewClusterClusterLogConfDbfs;
    s3?: outputs.JobTaskNewClusterClusterLogConfS3;
}

export interface JobTaskNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface JobTaskNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobTaskNewClusterDockerImage {
    basicAuth?: outputs.JobTaskNewClusterDockerImageBasicAuth;
    url: string;
}

export interface JobTaskNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface JobTaskNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface JobTaskNewClusterInitScript {
    dbfs?: outputs.JobTaskNewClusterInitScriptDbfs;
    file?: outputs.JobTaskNewClusterInitScriptFile;
    gcs?: outputs.JobTaskNewClusterInitScriptGcs;
    s3?: outputs.JobTaskNewClusterInitScriptS3;
}

export interface JobTaskNewClusterInitScriptDbfs {
    destination: string;
}

export interface JobTaskNewClusterInitScriptFile {
    destination?: string;
}

export interface JobTaskNewClusterInitScriptGcs {
    destination?: string;
}

export interface JobTaskNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobTaskNewClusterWorkloadType {
    clients: outputs.JobTaskNewClusterWorkloadTypeClients;
}

export interface JobTaskNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface JobTaskNotebookTask {
    baseParameters?: {[key: string]: any};
    notebookPath: string;
}

export interface JobTaskPipelineTask {
    pipelineId: string;
}

export interface JobTaskPythonWheelTask {
    entryPoint?: string;
    namedParameters?: {[key: string]: any};
    packageName?: string;
    parameters?: string[];
}

export interface JobTaskSparkJarTask {
    jarUri?: string;
    mainClassName?: string;
    parameters?: string[];
}

export interface JobTaskSparkPythonTask {
    parameters?: string[];
    pythonFile: string;
}

export interface JobTaskSparkSubmitTask {
    parameters?: string[];
}

export interface JobTaskSqlTask {
    alert?: outputs.JobTaskSqlTaskAlert;
    dashboard?: outputs.JobTaskSqlTaskDashboard;
    parameters?: {[key: string]: any};
    query?: outputs.JobTaskSqlTaskQuery;
    warehouseId?: string;
}

export interface JobTaskSqlTaskAlert {
    alertId: string;
}

export interface JobTaskSqlTaskDashboard {
    dashboardId: string;
}

export interface JobTaskSqlTaskQuery {
    queryId: string;
}

export interface LibraryCran {
    package: string;
    repo?: string;
}

export interface LibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface LibraryPypi {
    package: string;
    repo?: string;
}

export interface MetastoreDataAccessAwsIamRole {
    roleArn: string;
}

export interface MetastoreDataAccessAzureManagedIdentity {
    accessConnectorId: string;
}

export interface MetastoreDataAccessAzureServicePrincipal {
    applicationId: string;
    clientSecret: string;
    directoryId: string;
}

export interface MlflowModelTag {
    key: string;
    value: string;
}

export interface MlflowWebhookHttpUrlSpec {
    authorization?: string;
    enableSslVerification?: boolean;
    string?: string;
    url: string;
}

export interface MlflowWebhookJobSpec {
    accessToken: string;
    jobId: string;
    workspaceUrl?: string;
}

export interface MountAbfs {
    clientId: string;
    clientSecretKey: string;
    clientSecretScope: string;
    containerName: string;
    directory?: string;
    initializeFileSystem: boolean;
    storageAccountName: string;
    tenantId: string;
}

export interface MountAdl {
    clientId: string;
    clientSecretKey: string;
    clientSecretScope: string;
    directory?: string;
    sparkConfPrefix?: string;
    storageResourceName: string;
    tenantId: string;
}

export interface MountGs {
    bucketName: string;
    serviceAccount?: string;
}

export interface MountS3 {
    bucketName: string;
    instanceProfile?: string;
}

export interface MountWasb {
    authType: string;
    containerName: string;
    directory?: string;
    storageAccountName: string;
    tokenSecretKey: string;
    tokenSecretScope: string;
}

export interface MwsCustomerManagedKeysAwsKeyInfo {
    keyAlias: string;
    keyArn: string;
    keyRegion: string;
}

export interface MwsNetworksErrorMessage {
    errorMessage?: string;
    errorType?: string;
}

export interface MwsNetworksVpcEndpoints {
    dataplaneRelays: string[];
    restApis: string[];
}

export interface MwsWorkspacesCloudResourceBucket {
    gcp: outputs.MwsWorkspacesCloudResourceBucketGcp;
}

export interface MwsWorkspacesCloudResourceBucketGcp {
    projectId: string;
}

export interface MwsWorkspacesExternalCustomerInfo {
    authoritativeUserEmail: string;
    authoritativeUserFullName: string;
    customerName: string;
}

export interface MwsWorkspacesNetwork {
    gcpCommonNetworkConfig: outputs.MwsWorkspacesNetworkGcpCommonNetworkConfig;
    gcpManagedNetworkConfig?: outputs.MwsWorkspacesNetworkGcpManagedNetworkConfig;
    networkId?: string;
}

export interface MwsWorkspacesNetworkGcpCommonNetworkConfig {
    gkeClusterMasterIpRange: string;
    gkeConnectivityType: string;
}

export interface MwsWorkspacesNetworkGcpManagedNetworkConfig {
    gkeClusterPodIpRange: string;
    gkeClusterServiceIpRange: string;
    subnetCidr: string;
}

export interface MwsWorkspacesToken {
    comment?: string;
    lifetimeSeconds?: number;
    tokenId: string;
    tokenValue: string;
}

export interface PermissionsAccessControl {
    groupName?: string;
    permissionLevel: string;
    servicePrincipalName?: string;
    userName?: string;
}

export interface PipelineCluster {
    autoscale?: outputs.PipelineClusterAutoscale;
    awsAttributes?: outputs.PipelineClusterAwsAttributes;
    clusterLogConf?: outputs.PipelineClusterClusterLogConf;
    customTags?: {[key: string]: any};
    driverInstancePoolId?: string;
    driverNodeTypeId: string;
    gcpAttributes?: outputs.PipelineClusterGcpAttributes;
    initScripts?: outputs.PipelineClusterInitScript[];
    instancePoolId?: string;
    label?: string;
    nodeTypeId: string;
    numWorkers?: number;
    sparkConf?: {[key: string]: any};
    sparkEnvVars?: {[key: string]: any};
    sshPublicKeys?: string[];
}

export interface PipelineClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface PipelineClusterAwsAttributes {
    firstOnDemand?: number;
    instanceProfileArn?: string;
    zoneId?: string;
}

export interface PipelineClusterClusterLogConf {
    dbfs?: outputs.PipelineClusterClusterLogConfDbfs;
    s3?: outputs.PipelineClusterClusterLogConfS3;
}

export interface PipelineClusterClusterLogConfDbfs {
    destination: string;
}

export interface PipelineClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface PipelineClusterGcpAttributes {
    googleServiceAccount?: string;
}

export interface PipelineClusterInitScript {
    dbfs?: outputs.PipelineClusterInitScriptDbfs;
    file?: outputs.PipelineClusterInitScriptFile;
    gcs?: outputs.PipelineClusterInitScriptGcs;
    s3?: outputs.PipelineClusterInitScriptS3;
}

export interface PipelineClusterInitScriptDbfs {
    destination: string;
}

export interface PipelineClusterInitScriptFile {
    destination?: string;
}

export interface PipelineClusterInitScriptGcs {
    destination?: string;
}

export interface PipelineClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface PipelineFilters {
    excludes?: string[];
    includes?: string[];
}

export interface PipelineLibrary {
    jar?: string;
    maven?: outputs.PipelineLibraryMaven;
    notebook?: outputs.PipelineLibraryNotebook;
    whl?: string;
}

export interface PipelineLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface PipelineLibraryNotebook {
    path: string;
}

export interface SecretScopeKeyvaultMetadata {
    dnsName: string;
    resourceId: string;
}

export interface SqlEndpointChannel {
    name?: string;
}

export interface SqlEndpointOdbcParams {
    host?: string;
    hostname?: string;
    path: string;
    port: number;
    protocol: string;
}

export interface SqlEndpointTags {
    customTags: outputs.SqlEndpointTagsCustomTag[];
}

export interface SqlEndpointTagsCustomTag {
    key: string;
    value: string;
}

export interface SqlPermissionsPrivilegeAssignment {
    principal: string;
    privileges: string[];
}

export interface SqlQueryParameter {
    date?: outputs.SqlQueryParameterDate;
    dateRange?: outputs.SqlQueryParameterDateRange;
    datetime?: outputs.SqlQueryParameterDatetime;
    datetimeRange?: outputs.SqlQueryParameterDatetimeRange;
    datetimesec?: outputs.SqlQueryParameterDatetimesec;
    datetimesecRange?: outputs.SqlQueryParameterDatetimesecRange;
    enum?: outputs.SqlQueryParameterEnum;
    name: string;
    number?: outputs.SqlQueryParameterNumber;
    query?: outputs.SqlQueryParameterQuery;
    text?: outputs.SqlQueryParameterText;
    title?: string;
}

export interface SqlQueryParameterDate {
    value: string;
}

export interface SqlQueryParameterDateRange {
    value: string;
}

export interface SqlQueryParameterDatetime {
    value: string;
}

export interface SqlQueryParameterDatetimeRange {
    value: string;
}

export interface SqlQueryParameterDatetimesec {
    value: string;
}

export interface SqlQueryParameterDatetimesecRange {
    value: string;
}

export interface SqlQueryParameterEnum {
    multiple?: outputs.SqlQueryParameterEnumMultiple;
    options: string[];
    value?: string;
    values?: string[];
}

export interface SqlQueryParameterEnumMultiple {
    prefix: string;
    separator: string;
    suffix: string;
}

export interface SqlQueryParameterNumber {
    value: number;
}

export interface SqlQueryParameterQuery {
    multiple?: outputs.SqlQueryParameterQueryMultiple;
    queryId: string;
    value?: string;
    values?: string[];
}

export interface SqlQueryParameterQueryMultiple {
    prefix: string;
    separator: string;
    suffix: string;
}

export interface SqlQueryParameterText {
    value: string;
}

export interface SqlQuerySchedule {
    continuous?: outputs.SqlQueryScheduleContinuous;
    daily?: outputs.SqlQueryScheduleDaily;
    weekly?: outputs.SqlQueryScheduleWeekly;
}

export interface SqlQueryScheduleContinuous {
    intervalSeconds: number;
    untilDate?: string;
}

export interface SqlQueryScheduleDaily {
    intervalDays: number;
    timeOfDay: string;
    untilDate?: string;
}

export interface SqlQueryScheduleWeekly {
    dayOfWeek: string;
    intervalWeeks: number;
    timeOfDay: string;
    untilDate?: string;
}

export interface SqlWidgetParameter {
    mapTo?: string;
    name: string;
    title?: string;
    type: string;
    value?: string;
    values?: string[];
}

export interface SqlWidgetPosition {
    autoHeight?: boolean;
    posX?: number;
    posY?: number;
    sizeX: number;
    sizeY: number;
}

export interface StorageCredentialAwsIamRole {
    roleArn: string;
}

export interface StorageCredentialAzureManagedIdentity {
    accessConnectorId: string;
}

export interface StorageCredentialAzureServicePrincipal {
    applicationId: string;
    clientSecret: string;
    directoryId: string;
}

export interface TableColumn {
    comment?: string;
    name: string;
    nullable?: boolean;
    partitionIndex?: number;
    position: number;
    typeIntervalType?: string;
    typeJson?: string;
    typeName: string;
    typePrecision?: number;
    typeScale?: number;
    typeText: string;
}

