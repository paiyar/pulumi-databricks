// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface ClusterAutoscale {
    maxWorkers?: pulumi.Input<number>;
    minWorkers?: pulumi.Input<number>;
}

export interface ClusterAwsAttributes {
    availability?: pulumi.Input<string>;
    ebsVolumeCount?: pulumi.Input<number>;
    ebsVolumeSize?: pulumi.Input<number>;
    ebsVolumeType?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    instanceProfileArn?: pulumi.Input<string>;
    spotBidPricePercent?: pulumi.Input<number>;
    zoneId?: pulumi.Input<string>;
}

export interface ClusterAzureAttributes {
    availability?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    spotBidMaxPrice?: pulumi.Input<number>;
}

export interface ClusterClusterLogConf {
    dbfs?: pulumi.Input<inputs.ClusterClusterLogConfDbfs>;
    s3?: pulumi.Input<inputs.ClusterClusterLogConfS3>;
}

export interface ClusterClusterLogConfDbfs {
    destination: pulumi.Input<string>;
}

export interface ClusterClusterLogConfS3 {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface ClusterDockerImage {
    basicAuth?: pulumi.Input<inputs.ClusterDockerImageBasicAuth>;
    url: pulumi.Input<string>;
}

export interface ClusterDockerImageBasicAuth {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface ClusterGcpAttributes {
    availability?: pulumi.Input<string>;
    bootDiskSize?: pulumi.Input<number>;
    googleServiceAccount?: pulumi.Input<string>;
    usePreemptibleExecutors?: pulumi.Input<boolean>;
    zoneId?: pulumi.Input<string>;
}

export interface ClusterInitScript {
    dbfs?: pulumi.Input<inputs.ClusterInitScriptDbfs>;
    file?: pulumi.Input<inputs.ClusterInitScriptFile>;
    gcs?: pulumi.Input<inputs.ClusterInitScriptGcs>;
    s3?: pulumi.Input<inputs.ClusterInitScriptS3>;
}

export interface ClusterInitScriptDbfs {
    destination: pulumi.Input<string>;
}

export interface ClusterInitScriptFile {
    destination?: pulumi.Input<string>;
}

export interface ClusterInitScriptGcs {
    destination?: pulumi.Input<string>;
}

export interface ClusterInitScriptS3 {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface ClusterLibrary {
    cran?: pulumi.Input<inputs.ClusterLibraryCran>;
    egg?: pulumi.Input<string>;
    jar?: pulumi.Input<string>;
    maven?: pulumi.Input<inputs.ClusterLibraryMaven>;
    pypi?: pulumi.Input<inputs.ClusterLibraryPypi>;
    whl?: pulumi.Input<string>;
}

export interface ClusterLibraryCran {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface ClusterLibraryMaven {
    coordinates: pulumi.Input<string>;
    exclusions?: pulumi.Input<pulumi.Input<string>[]>;
    repo?: pulumi.Input<string>;
}

export interface ClusterLibraryPypi {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface ClusterWorkloadType {
    clients: pulumi.Input<inputs.ClusterWorkloadTypeClients>;
}

export interface ClusterWorkloadTypeClients {
    jobs?: pulumi.Input<boolean>;
    notebooks?: pulumi.Input<boolean>;
}

export interface GetClusterClusterInfo {
    autoscale?: inputs.GetClusterClusterInfoAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: inputs.GetClusterClusterInfoAwsAttributes;
    azureAttributes?: inputs.GetClusterClusterInfoAzureAttributes;
    clusterCores?: number;
    clusterId?: string;
    clusterLogConf?: inputs.GetClusterClusterInfoClusterLogConf;
    clusterLogStatus?: inputs.GetClusterClusterInfoClusterLogStatus;
    clusterMemoryMb?: number;
    clusterName?: string;
    clusterSource?: string;
    creatorUserName?: string;
    customTags?: {[key: string]: any};
    dataSecurityMode?: string;
    defaultTags: {[key: string]: any};
    dockerImage?: inputs.GetClusterClusterInfoDockerImage;
    driver?: inputs.GetClusterClusterInfoDriver;
    driverInstancePoolId?: string;
    driverNodeTypeId?: string;
    enableElasticDisk?: boolean;
    enableLocalDiskEncryption?: boolean;
    executors?: inputs.GetClusterClusterInfoExecutor[];
    gcpAttributes?: inputs.GetClusterClusterInfoGcpAttributes;
    initScripts?: inputs.GetClusterClusterInfoInitScript[];
    instancePoolId?: string;
    jdbcPort?: number;
    lastActivityTime?: number;
    lastStateLossTime?: number;
    nodeTypeId?: string;
    numWorkers?: number;
    policyId?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: any};
    sparkContextId?: number;
    sparkEnvVars?: {[key: string]: any};
    sparkVersion: string;
    sshPublicKeys?: string[];
    startTime?: number;
    state: string;
    stateMessage?: string;
    terminateTime?: number;
    terminationReason?: inputs.GetClusterClusterInfoTerminationReason;
}

export interface GetClusterClusterInfoArgs {
    autoscale?: pulumi.Input<inputs.GetClusterClusterInfoAutoscaleArgs>;
    autoterminationMinutes?: pulumi.Input<number>;
    awsAttributes?: pulumi.Input<inputs.GetClusterClusterInfoAwsAttributesArgs>;
    azureAttributes?: pulumi.Input<inputs.GetClusterClusterInfoAzureAttributesArgs>;
    clusterCores?: pulumi.Input<number>;
    clusterId?: pulumi.Input<string>;
    clusterLogConf?: pulumi.Input<inputs.GetClusterClusterInfoClusterLogConfArgs>;
    clusterLogStatus?: pulumi.Input<inputs.GetClusterClusterInfoClusterLogStatusArgs>;
    clusterMemoryMb?: pulumi.Input<number>;
    clusterName?: pulumi.Input<string>;
    clusterSource?: pulumi.Input<string>;
    creatorUserName?: pulumi.Input<string>;
    customTags?: pulumi.Input<{[key: string]: any}>;
    dataSecurityMode?: pulumi.Input<string>;
    defaultTags: pulumi.Input<{[key: string]: any}>;
    dockerImage?: pulumi.Input<inputs.GetClusterClusterInfoDockerImageArgs>;
    driver?: pulumi.Input<inputs.GetClusterClusterInfoDriverArgs>;
    driverInstancePoolId?: pulumi.Input<string>;
    driverNodeTypeId?: pulumi.Input<string>;
    enableElasticDisk?: pulumi.Input<boolean>;
    enableLocalDiskEncryption?: pulumi.Input<boolean>;
    executors?: pulumi.Input<pulumi.Input<inputs.GetClusterClusterInfoExecutorArgs>[]>;
    gcpAttributes?: pulumi.Input<inputs.GetClusterClusterInfoGcpAttributesArgs>;
    initScripts?: pulumi.Input<pulumi.Input<inputs.GetClusterClusterInfoInitScriptArgs>[]>;
    instancePoolId?: pulumi.Input<string>;
    jdbcPort?: pulumi.Input<number>;
    lastActivityTime?: pulumi.Input<number>;
    lastStateLossTime?: pulumi.Input<number>;
    nodeTypeId?: pulumi.Input<string>;
    numWorkers?: pulumi.Input<number>;
    policyId?: pulumi.Input<string>;
    singleUserName?: pulumi.Input<string>;
    sparkConf?: pulumi.Input<{[key: string]: any}>;
    sparkContextId?: pulumi.Input<number>;
    sparkEnvVars?: pulumi.Input<{[key: string]: any}>;
    sparkVersion: pulumi.Input<string>;
    sshPublicKeys?: pulumi.Input<pulumi.Input<string>[]>;
    startTime?: pulumi.Input<number>;
    state: pulumi.Input<string>;
    stateMessage?: pulumi.Input<string>;
    terminateTime?: pulumi.Input<number>;
    terminationReason?: pulumi.Input<inputs.GetClusterClusterInfoTerminationReasonArgs>;
}

export interface GetClusterClusterInfoAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface GetClusterClusterInfoAutoscaleArgs {
    maxWorkers?: pulumi.Input<number>;
    minWorkers?: pulumi.Input<number>;
}

export interface GetClusterClusterInfoAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface GetClusterClusterInfoAwsAttributesArgs {
    availability?: pulumi.Input<string>;
    ebsVolumeCount?: pulumi.Input<number>;
    ebsVolumeSize?: pulumi.Input<number>;
    ebsVolumeType?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    instanceProfileArn?: pulumi.Input<string>;
    spotBidPricePercent?: pulumi.Input<number>;
    zoneId?: pulumi.Input<string>;
}

export interface GetClusterClusterInfoAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface GetClusterClusterInfoAzureAttributesArgs {
    availability?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    spotBidMaxPrice?: pulumi.Input<number>;
}

export interface GetClusterClusterInfoClusterLogConf {
    dbfs?: inputs.GetClusterClusterInfoClusterLogConfDbfs;
    s3?: inputs.GetClusterClusterInfoClusterLogConfS3;
}

export interface GetClusterClusterInfoClusterLogConfArgs {
    dbfs?: pulumi.Input<inputs.GetClusterClusterInfoClusterLogConfDbfsArgs>;
    s3?: pulumi.Input<inputs.GetClusterClusterInfoClusterLogConfS3Args>;
}

export interface GetClusterClusterInfoClusterLogConfDbfs {
    destination: string;
}

export interface GetClusterClusterInfoClusterLogConfDbfsArgs {
    destination: pulumi.Input<string>;
}

export interface GetClusterClusterInfoClusterLogConfS3Args {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface GetClusterClusterInfoClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetClusterClusterInfoClusterLogStatus {
    lastAttempted?: number;
    lastException?: string;
}

export interface GetClusterClusterInfoClusterLogStatusArgs {
    lastAttempted?: pulumi.Input<number>;
    lastException?: pulumi.Input<string>;
}

export interface GetClusterClusterInfoDockerImageArgs {
    basicAuth?: pulumi.Input<inputs.GetClusterClusterInfoDockerImageBasicAuthArgs>;
    url: pulumi.Input<string>;
}

export interface GetClusterClusterInfoDockerImage {
    basicAuth?: inputs.GetClusterClusterInfoDockerImageBasicAuth;
    url: string;
}

export interface GetClusterClusterInfoDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface GetClusterClusterInfoDockerImageBasicAuthArgs {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface GetClusterClusterInfoDriver {
    hostPrivateIp?: string;
    instanceId?: string;
    nodeAwsAttributes?: inputs.GetClusterClusterInfoDriverNodeAwsAttributes;
    nodeId?: string;
    privateIp?: string;
    publicDns?: string;
    startTimestamp?: number;
}

export interface GetClusterClusterInfoDriverArgs {
    hostPrivateIp?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    nodeAwsAttributes?: pulumi.Input<inputs.GetClusterClusterInfoDriverNodeAwsAttributesArgs>;
    nodeId?: pulumi.Input<string>;
    privateIp?: pulumi.Input<string>;
    publicDns?: pulumi.Input<string>;
    startTimestamp?: pulumi.Input<number>;
}

export interface GetClusterClusterInfoDriverNodeAwsAttributes {
    isSpot?: boolean;
}

export interface GetClusterClusterInfoDriverNodeAwsAttributesArgs {
    isSpot?: pulumi.Input<boolean>;
}

export interface GetClusterClusterInfoExecutor {
    hostPrivateIp?: string;
    instanceId?: string;
    nodeAwsAttributes?: inputs.GetClusterClusterInfoExecutorNodeAwsAttributes;
    nodeId?: string;
    privateIp?: string;
    publicDns?: string;
    startTimestamp?: number;
}

export interface GetClusterClusterInfoExecutorArgs {
    hostPrivateIp?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    nodeAwsAttributes?: pulumi.Input<inputs.GetClusterClusterInfoExecutorNodeAwsAttributesArgs>;
    nodeId?: pulumi.Input<string>;
    privateIp?: pulumi.Input<string>;
    publicDns?: pulumi.Input<string>;
    startTimestamp?: pulumi.Input<number>;
}

export interface GetClusterClusterInfoExecutorNodeAwsAttributes {
    isSpot?: boolean;
}

export interface GetClusterClusterInfoExecutorNodeAwsAttributesArgs {
    isSpot?: pulumi.Input<boolean>;
}

export interface GetClusterClusterInfoGcpAttributesArgs {
    availability?: pulumi.Input<string>;
    bootDiskSize?: pulumi.Input<number>;
    googleServiceAccount?: pulumi.Input<string>;
    usePreemptibleExecutors?: pulumi.Input<boolean>;
    zoneId?: pulumi.Input<string>;
}

export interface GetClusterClusterInfoGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface GetClusterClusterInfoInitScript {
    dbfs?: inputs.GetClusterClusterInfoInitScriptDbfs;
    s3?: inputs.GetClusterClusterInfoInitScriptS3;
}

export interface GetClusterClusterInfoInitScriptArgs {
    dbfs?: pulumi.Input<inputs.GetClusterClusterInfoInitScriptDbfsArgs>;
    s3?: pulumi.Input<inputs.GetClusterClusterInfoInitScriptS3Args>;
}

export interface GetClusterClusterInfoInitScriptDbfsArgs {
    destination: pulumi.Input<string>;
}

export interface GetClusterClusterInfoInitScriptDbfs {
    destination: string;
}

export interface GetClusterClusterInfoInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetClusterClusterInfoInitScriptS3Args {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface GetClusterClusterInfoTerminationReason {
    code?: string;
    parameters?: {[key: string]: any};
    type?: string;
}

export interface GetClusterClusterInfoTerminationReasonArgs {
    code?: pulumi.Input<string>;
    parameters?: pulumi.Input<{[key: string]: any}>;
    type?: pulumi.Input<string>;
}

export interface GetSqlWarehouseChannel {
    name?: string;
}

export interface GetSqlWarehouseChannelArgs {
    name?: pulumi.Input<string>;
}

export interface GetSqlWarehouseOdbcParams {
    host?: string;
    hostname?: string;
    path: string;
    port: number;
    protocol: string;
}

export interface GetSqlWarehouseOdbcParamsArgs {
    host?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    path: pulumi.Input<string>;
    port: pulumi.Input<number>;
    protocol: pulumi.Input<string>;
}

export interface GetSqlWarehouseTags {
    customTags: inputs.GetSqlWarehouseTagsCustomTag[];
}

export interface GetSqlWarehouseTagsArgs {
    customTags: pulumi.Input<pulumi.Input<inputs.GetSqlWarehouseTagsCustomTagArgs>[]>;
}

export interface GetSqlWarehouseTagsCustomTag {
    key: string;
    value: string;
}

export interface GetSqlWarehouseTagsCustomTagArgs {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface GrantsGrant {
    principal: pulumi.Input<string>;
    privileges: pulumi.Input<pulumi.Input<string>[]>;
}

export interface InstancePoolAwsAttributes {
    availability?: pulumi.Input<string>;
    spotBidPricePercent?: pulumi.Input<number>;
    zoneId?: pulumi.Input<string>;
}

export interface InstancePoolAzureAttributes {
    availability?: pulumi.Input<string>;
    spotBidMaxPrice?: pulumi.Input<number>;
}

export interface InstancePoolDiskSpec {
    diskCount?: pulumi.Input<number>;
    diskSize?: pulumi.Input<number>;
    diskType?: pulumi.Input<inputs.InstancePoolDiskSpecDiskType>;
}

export interface InstancePoolDiskSpecDiskType {
    azureDiskVolumeType?: pulumi.Input<string>;
    ebsVolumeType?: pulumi.Input<string>;
}

export interface InstancePoolGcpAttributes {
    availability?: pulumi.Input<string>;
}

export interface InstancePoolInstancePoolFleetAttributes {
    fleetOnDemandOption?: pulumi.Input<inputs.InstancePoolInstancePoolFleetAttributesFleetOnDemandOption>;
    fleetSpotOption?: pulumi.Input<inputs.InstancePoolInstancePoolFleetAttributesFleetSpotOption>;
    launchTemplateOverrides: pulumi.Input<pulumi.Input<inputs.InstancePoolInstancePoolFleetAttributesLaunchTemplateOverride>[]>;
}

export interface InstancePoolInstancePoolFleetAttributesFleetOnDemandOption {
    allocationStrategy: pulumi.Input<string>;
    instancePoolsToUseCount?: pulumi.Input<number>;
}

export interface InstancePoolInstancePoolFleetAttributesFleetSpotOption {
    allocationStrategy: pulumi.Input<string>;
    instancePoolsToUseCount?: pulumi.Input<number>;
}

export interface InstancePoolInstancePoolFleetAttributesLaunchTemplateOverride {
    availabilityZone: pulumi.Input<string>;
    instanceType: pulumi.Input<string>;
}

export interface InstancePoolPreloadedDockerImage {
    basicAuth?: pulumi.Input<inputs.InstancePoolPreloadedDockerImageBasicAuth>;
    url: pulumi.Input<string>;
}

export interface InstancePoolPreloadedDockerImageBasicAuth {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface JobEmailNotifications {
    alertOnLastAttempt?: pulumi.Input<boolean>;
    noAlertForSkippedRuns?: pulumi.Input<boolean>;
    onFailures?: pulumi.Input<pulumi.Input<string>[]>;
    onStarts?: pulumi.Input<pulumi.Input<string>[]>;
    onSuccesses?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface JobGitSource {
    branch?: pulumi.Input<string>;
    commit?: pulumi.Input<string>;
    provider?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface JobJobCluster {
    jobClusterKey?: pulumi.Input<string>;
    newCluster?: pulumi.Input<inputs.JobJobClusterNewCluster>;
}

export interface JobJobClusterNewCluster {
    autoscale?: pulumi.Input<inputs.JobJobClusterNewClusterAutoscale>;
    autoterminationMinutes?: pulumi.Input<number>;
    awsAttributes?: pulumi.Input<inputs.JobJobClusterNewClusterAwsAttributes>;
    azureAttributes?: pulumi.Input<inputs.JobJobClusterNewClusterAzureAttributes>;
    clusterId?: pulumi.Input<string>;
    clusterLogConf?: pulumi.Input<inputs.JobJobClusterNewClusterClusterLogConf>;
    clusterName?: pulumi.Input<string>;
    customTags?: pulumi.Input<{[key: string]: any}>;
    dataSecurityMode?: pulumi.Input<string>;
    dockerImage?: pulumi.Input<inputs.JobJobClusterNewClusterDockerImage>;
    driverInstancePoolId?: pulumi.Input<string>;
    driverNodeTypeId?: pulumi.Input<string>;
    enableElasticDisk?: pulumi.Input<boolean>;
    enableLocalDiskEncryption?: pulumi.Input<boolean>;
    gcpAttributes?: pulumi.Input<inputs.JobJobClusterNewClusterGcpAttributes>;
    idempotencyToken?: pulumi.Input<string>;
    initScripts?: pulumi.Input<pulumi.Input<inputs.JobJobClusterNewClusterInitScript>[]>;
    instancePoolId?: pulumi.Input<string>;
    nodeTypeId?: pulumi.Input<string>;
    numWorkers?: pulumi.Input<number>;
    policyId?: pulumi.Input<string>;
    singleUserName?: pulumi.Input<string>;
    sparkConf?: pulumi.Input<{[key: string]: any}>;
    sparkEnvVars?: pulumi.Input<{[key: string]: any}>;
    sparkVersion: pulumi.Input<string>;
    sshPublicKeys?: pulumi.Input<pulumi.Input<string>[]>;
    workloadType?: pulumi.Input<inputs.JobJobClusterNewClusterWorkloadType>;
}

export interface JobJobClusterNewClusterAutoscale {
    maxWorkers?: pulumi.Input<number>;
    minWorkers?: pulumi.Input<number>;
}

export interface JobJobClusterNewClusterAwsAttributes {
    availability?: pulumi.Input<string>;
    ebsVolumeCount?: pulumi.Input<number>;
    ebsVolumeSize?: pulumi.Input<number>;
    ebsVolumeType?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    instanceProfileArn?: pulumi.Input<string>;
    spotBidPricePercent?: pulumi.Input<number>;
    zoneId?: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterAzureAttributes {
    availability?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    spotBidMaxPrice?: pulumi.Input<number>;
}

export interface JobJobClusterNewClusterClusterLogConf {
    dbfs?: pulumi.Input<inputs.JobJobClusterNewClusterClusterLogConfDbfs>;
    s3?: pulumi.Input<inputs.JobJobClusterNewClusterClusterLogConfS3>;
}

export interface JobJobClusterNewClusterClusterLogConfDbfs {
    destination: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterClusterLogConfS3 {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterDockerImage {
    basicAuth?: pulumi.Input<inputs.JobJobClusterNewClusterDockerImageBasicAuth>;
    url: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterDockerImageBasicAuth {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterGcpAttributes {
    availability?: pulumi.Input<string>;
    bootDiskSize?: pulumi.Input<number>;
    googleServiceAccount?: pulumi.Input<string>;
    usePreemptibleExecutors?: pulumi.Input<boolean>;
    zoneId?: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterInitScript {
    dbfs?: pulumi.Input<inputs.JobJobClusterNewClusterInitScriptDbfs>;
    file?: pulumi.Input<inputs.JobJobClusterNewClusterInitScriptFile>;
    gcs?: pulumi.Input<inputs.JobJobClusterNewClusterInitScriptGcs>;
    s3?: pulumi.Input<inputs.JobJobClusterNewClusterInitScriptS3>;
}

export interface JobJobClusterNewClusterInitScriptDbfs {
    destination: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterInitScriptFile {
    destination?: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterInitScriptGcs {
    destination?: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterInitScriptS3 {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterWorkloadType {
    clients: pulumi.Input<inputs.JobJobClusterNewClusterWorkloadTypeClients>;
}

export interface JobJobClusterNewClusterWorkloadTypeClients {
    jobs?: pulumi.Input<boolean>;
    notebooks?: pulumi.Input<boolean>;
}

export interface JobLibrary {
    cran?: pulumi.Input<inputs.JobLibraryCran>;
    egg?: pulumi.Input<string>;
    jar?: pulumi.Input<string>;
    maven?: pulumi.Input<inputs.JobLibraryMaven>;
    pypi?: pulumi.Input<inputs.JobLibraryPypi>;
    whl?: pulumi.Input<string>;
}

export interface JobLibraryCran {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface JobLibraryMaven {
    coordinates: pulumi.Input<string>;
    exclusions?: pulumi.Input<pulumi.Input<string>[]>;
    repo?: pulumi.Input<string>;
}

export interface JobLibraryPypi {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface JobNewCluster {
    autoscale?: pulumi.Input<inputs.JobNewClusterAutoscale>;
    autoterminationMinutes?: pulumi.Input<number>;
    awsAttributes?: pulumi.Input<inputs.JobNewClusterAwsAttributes>;
    azureAttributes?: pulumi.Input<inputs.JobNewClusterAzureAttributes>;
    clusterId?: pulumi.Input<string>;
    clusterLogConf?: pulumi.Input<inputs.JobNewClusterClusterLogConf>;
    clusterName?: pulumi.Input<string>;
    customTags?: pulumi.Input<{[key: string]: any}>;
    dataSecurityMode?: pulumi.Input<string>;
    dockerImage?: pulumi.Input<inputs.JobNewClusterDockerImage>;
    driverInstancePoolId?: pulumi.Input<string>;
    driverNodeTypeId?: pulumi.Input<string>;
    enableElasticDisk?: pulumi.Input<boolean>;
    enableLocalDiskEncryption?: pulumi.Input<boolean>;
    gcpAttributes?: pulumi.Input<inputs.JobNewClusterGcpAttributes>;
    idempotencyToken?: pulumi.Input<string>;
    initScripts?: pulumi.Input<pulumi.Input<inputs.JobNewClusterInitScript>[]>;
    instancePoolId?: pulumi.Input<string>;
    nodeTypeId?: pulumi.Input<string>;
    numWorkers?: pulumi.Input<number>;
    policyId?: pulumi.Input<string>;
    singleUserName?: pulumi.Input<string>;
    sparkConf?: pulumi.Input<{[key: string]: any}>;
    sparkEnvVars?: pulumi.Input<{[key: string]: any}>;
    sparkVersion: pulumi.Input<string>;
    sshPublicKeys?: pulumi.Input<pulumi.Input<string>[]>;
    workloadType?: pulumi.Input<inputs.JobNewClusterWorkloadType>;
}

export interface JobNewClusterAutoscale {
    maxWorkers?: pulumi.Input<number>;
    minWorkers?: pulumi.Input<number>;
}

export interface JobNewClusterAwsAttributes {
    availability?: pulumi.Input<string>;
    ebsVolumeCount?: pulumi.Input<number>;
    ebsVolumeSize?: pulumi.Input<number>;
    ebsVolumeType?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    instanceProfileArn?: pulumi.Input<string>;
    spotBidPricePercent?: pulumi.Input<number>;
    zoneId?: pulumi.Input<string>;
}

export interface JobNewClusterAzureAttributes {
    availability?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    spotBidMaxPrice?: pulumi.Input<number>;
}

export interface JobNewClusterClusterLogConf {
    dbfs?: pulumi.Input<inputs.JobNewClusterClusterLogConfDbfs>;
    s3?: pulumi.Input<inputs.JobNewClusterClusterLogConfS3>;
}

export interface JobNewClusterClusterLogConfDbfs {
    destination: pulumi.Input<string>;
}

export interface JobNewClusterClusterLogConfS3 {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface JobNewClusterDockerImage {
    basicAuth?: pulumi.Input<inputs.JobNewClusterDockerImageBasicAuth>;
    url: pulumi.Input<string>;
}

export interface JobNewClusterDockerImageBasicAuth {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface JobNewClusterGcpAttributes {
    availability?: pulumi.Input<string>;
    bootDiskSize?: pulumi.Input<number>;
    googleServiceAccount?: pulumi.Input<string>;
    usePreemptibleExecutors?: pulumi.Input<boolean>;
    zoneId?: pulumi.Input<string>;
}

export interface JobNewClusterInitScript {
    dbfs?: pulumi.Input<inputs.JobNewClusterInitScriptDbfs>;
    file?: pulumi.Input<inputs.JobNewClusterInitScriptFile>;
    gcs?: pulumi.Input<inputs.JobNewClusterInitScriptGcs>;
    s3?: pulumi.Input<inputs.JobNewClusterInitScriptS3>;
}

export interface JobNewClusterInitScriptDbfs {
    destination: pulumi.Input<string>;
}

export interface JobNewClusterInitScriptFile {
    destination?: pulumi.Input<string>;
}

export interface JobNewClusterInitScriptGcs {
    destination?: pulumi.Input<string>;
}

export interface JobNewClusterInitScriptS3 {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface JobNewClusterWorkloadType {
    clients: pulumi.Input<inputs.JobNewClusterWorkloadTypeClients>;
}

export interface JobNewClusterWorkloadTypeClients {
    jobs?: pulumi.Input<boolean>;
    notebooks?: pulumi.Input<boolean>;
}

export interface JobNotebookTask {
    baseParameters?: pulumi.Input<{[key: string]: any}>;
    notebookPath: pulumi.Input<string>;
}

export interface JobPipelineTask {
    pipelineId: pulumi.Input<string>;
}

export interface JobPythonWheelTask {
    entryPoint?: pulumi.Input<string>;
    namedParameters?: pulumi.Input<{[key: string]: any}>;
    packageName?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface JobSchedule {
    pauseStatus?: pulumi.Input<string>;
    quartzCronExpression: pulumi.Input<string>;
    timezoneId: pulumi.Input<string>;
}

export interface JobSparkJarTask {
    jarUri?: pulumi.Input<string>;
    mainClassName?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface JobSparkPythonTask {
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
    pythonFile: pulumi.Input<string>;
}

export interface JobSparkSubmitTask {
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface JobTask {
    dbtTask?: pulumi.Input<inputs.JobTaskDbtTask>;
    dependsOns?: pulumi.Input<pulumi.Input<inputs.JobTaskDependsOn>[]>;
    description?: pulumi.Input<string>;
    emailNotifications?: pulumi.Input<inputs.JobTaskEmailNotifications>;
    existingClusterId?: pulumi.Input<string>;
    jobClusterKey?: pulumi.Input<string>;
    libraries?: pulumi.Input<pulumi.Input<inputs.JobTaskLibrary>[]>;
    maxRetries?: pulumi.Input<number>;
    minRetryIntervalMillis?: pulumi.Input<number>;
    newCluster?: pulumi.Input<inputs.JobTaskNewCluster>;
    notebookTask?: pulumi.Input<inputs.JobTaskNotebookTask>;
    pipelineTask?: pulumi.Input<inputs.JobTaskPipelineTask>;
    pythonWheelTask?: pulumi.Input<inputs.JobTaskPythonWheelTask>;
    retryOnTimeout?: pulumi.Input<boolean>;
    sparkJarTask?: pulumi.Input<inputs.JobTaskSparkJarTask>;
    sparkPythonTask?: pulumi.Input<inputs.JobTaskSparkPythonTask>;
    sparkSubmitTask?: pulumi.Input<inputs.JobTaskSparkSubmitTask>;
    sqlTask?: pulumi.Input<inputs.JobTaskSqlTask>;
    taskKey?: pulumi.Input<string>;
    timeoutSeconds?: pulumi.Input<number>;
}

export interface JobTaskDbtTask {
    commands: pulumi.Input<pulumi.Input<string>[]>;
    projectDirectory?: pulumi.Input<string>;
    schema?: pulumi.Input<string>;
}

export interface JobTaskDependsOn {
    taskKey?: pulumi.Input<string>;
}

export interface JobTaskEmailNotifications {
    alertOnLastAttempt?: pulumi.Input<boolean>;
    noAlertForSkippedRuns?: pulumi.Input<boolean>;
    onFailures?: pulumi.Input<pulumi.Input<string>[]>;
    onStarts?: pulumi.Input<pulumi.Input<string>[]>;
    onSuccesses?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface JobTaskLibrary {
    cran?: pulumi.Input<inputs.JobTaskLibraryCran>;
    egg?: pulumi.Input<string>;
    jar?: pulumi.Input<string>;
    maven?: pulumi.Input<inputs.JobTaskLibraryMaven>;
    pypi?: pulumi.Input<inputs.JobTaskLibraryPypi>;
    whl?: pulumi.Input<string>;
}

export interface JobTaskLibraryCran {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface JobTaskLibraryMaven {
    coordinates: pulumi.Input<string>;
    exclusions?: pulumi.Input<pulumi.Input<string>[]>;
    repo?: pulumi.Input<string>;
}

export interface JobTaskLibraryPypi {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface JobTaskNewCluster {
    autoscale?: pulumi.Input<inputs.JobTaskNewClusterAutoscale>;
    autoterminationMinutes?: pulumi.Input<number>;
    awsAttributes?: pulumi.Input<inputs.JobTaskNewClusterAwsAttributes>;
    azureAttributes?: pulumi.Input<inputs.JobTaskNewClusterAzureAttributes>;
    clusterId?: pulumi.Input<string>;
    clusterLogConf?: pulumi.Input<inputs.JobTaskNewClusterClusterLogConf>;
    clusterName?: pulumi.Input<string>;
    customTags?: pulumi.Input<{[key: string]: any}>;
    dataSecurityMode?: pulumi.Input<string>;
    dockerImage?: pulumi.Input<inputs.JobTaskNewClusterDockerImage>;
    driverInstancePoolId?: pulumi.Input<string>;
    driverNodeTypeId?: pulumi.Input<string>;
    enableElasticDisk?: pulumi.Input<boolean>;
    enableLocalDiskEncryption?: pulumi.Input<boolean>;
    gcpAttributes?: pulumi.Input<inputs.JobTaskNewClusterGcpAttributes>;
    idempotencyToken?: pulumi.Input<string>;
    initScripts?: pulumi.Input<pulumi.Input<inputs.JobTaskNewClusterInitScript>[]>;
    instancePoolId?: pulumi.Input<string>;
    nodeTypeId?: pulumi.Input<string>;
    numWorkers?: pulumi.Input<number>;
    policyId?: pulumi.Input<string>;
    singleUserName?: pulumi.Input<string>;
    sparkConf?: pulumi.Input<{[key: string]: any}>;
    sparkEnvVars?: pulumi.Input<{[key: string]: any}>;
    sparkVersion: pulumi.Input<string>;
    sshPublicKeys?: pulumi.Input<pulumi.Input<string>[]>;
    workloadType?: pulumi.Input<inputs.JobTaskNewClusterWorkloadType>;
}

export interface JobTaskNewClusterAutoscale {
    maxWorkers?: pulumi.Input<number>;
    minWorkers?: pulumi.Input<number>;
}

export interface JobTaskNewClusterAwsAttributes {
    availability?: pulumi.Input<string>;
    ebsVolumeCount?: pulumi.Input<number>;
    ebsVolumeSize?: pulumi.Input<number>;
    ebsVolumeType?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    instanceProfileArn?: pulumi.Input<string>;
    spotBidPricePercent?: pulumi.Input<number>;
    zoneId?: pulumi.Input<string>;
}

export interface JobTaskNewClusterAzureAttributes {
    availability?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    spotBidMaxPrice?: pulumi.Input<number>;
}

export interface JobTaskNewClusterClusterLogConf {
    dbfs?: pulumi.Input<inputs.JobTaskNewClusterClusterLogConfDbfs>;
    s3?: pulumi.Input<inputs.JobTaskNewClusterClusterLogConfS3>;
}

export interface JobTaskNewClusterClusterLogConfDbfs {
    destination: pulumi.Input<string>;
}

export interface JobTaskNewClusterClusterLogConfS3 {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface JobTaskNewClusterDockerImage {
    basicAuth?: pulumi.Input<inputs.JobTaskNewClusterDockerImageBasicAuth>;
    url: pulumi.Input<string>;
}

export interface JobTaskNewClusterDockerImageBasicAuth {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface JobTaskNewClusterGcpAttributes {
    availability?: pulumi.Input<string>;
    bootDiskSize?: pulumi.Input<number>;
    googleServiceAccount?: pulumi.Input<string>;
    usePreemptibleExecutors?: pulumi.Input<boolean>;
    zoneId?: pulumi.Input<string>;
}

export interface JobTaskNewClusterInitScript {
    dbfs?: pulumi.Input<inputs.JobTaskNewClusterInitScriptDbfs>;
    file?: pulumi.Input<inputs.JobTaskNewClusterInitScriptFile>;
    gcs?: pulumi.Input<inputs.JobTaskNewClusterInitScriptGcs>;
    s3?: pulumi.Input<inputs.JobTaskNewClusterInitScriptS3>;
}

export interface JobTaskNewClusterInitScriptDbfs {
    destination: pulumi.Input<string>;
}

export interface JobTaskNewClusterInitScriptFile {
    destination?: pulumi.Input<string>;
}

export interface JobTaskNewClusterInitScriptGcs {
    destination?: pulumi.Input<string>;
}

export interface JobTaskNewClusterInitScriptS3 {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface JobTaskNewClusterWorkloadType {
    clients: pulumi.Input<inputs.JobTaskNewClusterWorkloadTypeClients>;
}

export interface JobTaskNewClusterWorkloadTypeClients {
    jobs?: pulumi.Input<boolean>;
    notebooks?: pulumi.Input<boolean>;
}

export interface JobTaskNotebookTask {
    baseParameters?: pulumi.Input<{[key: string]: any}>;
    notebookPath: pulumi.Input<string>;
}

export interface JobTaskPipelineTask {
    pipelineId: pulumi.Input<string>;
}

export interface JobTaskPythonWheelTask {
    entryPoint?: pulumi.Input<string>;
    namedParameters?: pulumi.Input<{[key: string]: any}>;
    packageName?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface JobTaskSparkJarTask {
    jarUri?: pulumi.Input<string>;
    mainClassName?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface JobTaskSparkPythonTask {
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
    pythonFile: pulumi.Input<string>;
}

export interface JobTaskSparkSubmitTask {
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface JobTaskSqlTask {
    alert?: pulumi.Input<inputs.JobTaskSqlTaskAlert>;
    dashboard?: pulumi.Input<inputs.JobTaskSqlTaskDashboard>;
    parameters?: pulumi.Input<{[key: string]: any}>;
    query?: pulumi.Input<inputs.JobTaskSqlTaskQuery>;
    warehouseId?: pulumi.Input<string>;
}

export interface JobTaskSqlTaskAlert {
    alertId: pulumi.Input<string>;
}

export interface JobTaskSqlTaskDashboard {
    dashboardId: pulumi.Input<string>;
}

export interface JobTaskSqlTaskQuery {
    queryId: pulumi.Input<string>;
}

export interface LibraryCran {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface LibraryMaven {
    coordinates: pulumi.Input<string>;
    exclusions?: pulumi.Input<pulumi.Input<string>[]>;
    repo?: pulumi.Input<string>;
}

export interface LibraryPypi {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface MetastoreDataAccessAwsIamRole {
    roleArn: pulumi.Input<string>;
}

export interface MetastoreDataAccessAzureManagedIdentity {
    accessConnectorId: pulumi.Input<string>;
}

export interface MetastoreDataAccessAzureServicePrincipal {
    applicationId: pulumi.Input<string>;
    clientSecret: pulumi.Input<string>;
    directoryId: pulumi.Input<string>;
}

export interface MlflowModelTag {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface MlflowWebhookHttpUrlSpec {
    authorization?: pulumi.Input<string>;
    enableSslVerification?: pulumi.Input<boolean>;
    string?: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface MlflowWebhookJobSpec {
    accessToken: pulumi.Input<string>;
    jobId: pulumi.Input<string>;
    workspaceUrl?: pulumi.Input<string>;
}

export interface MountAbfs {
    clientId: pulumi.Input<string>;
    clientSecretKey: pulumi.Input<string>;
    clientSecretScope: pulumi.Input<string>;
    containerName?: pulumi.Input<string>;
    directory?: pulumi.Input<string>;
    initializeFileSystem: pulumi.Input<boolean>;
    storageAccountName?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
}

export interface MountAdl {
    clientId: pulumi.Input<string>;
    clientSecretKey: pulumi.Input<string>;
    clientSecretScope: pulumi.Input<string>;
    directory?: pulumi.Input<string>;
    sparkConfPrefix?: pulumi.Input<string>;
    storageResourceName?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
}

export interface MountGs {
    bucketName: pulumi.Input<string>;
    serviceAccount?: pulumi.Input<string>;
}

export interface MountS3 {
    bucketName: pulumi.Input<string>;
    instanceProfile?: pulumi.Input<string>;
}

export interface MountWasb {
    authType: pulumi.Input<string>;
    containerName?: pulumi.Input<string>;
    directory?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    tokenSecretKey: pulumi.Input<string>;
    tokenSecretScope: pulumi.Input<string>;
}

export interface MwsCustomerManagedKeysAwsKeyInfo {
    keyAlias: pulumi.Input<string>;
    keyArn: pulumi.Input<string>;
    keyRegion?: pulumi.Input<string>;
}

export interface MwsNetworksErrorMessage {
    errorMessage?: pulumi.Input<string>;
    errorType?: pulumi.Input<string>;
}

export interface MwsNetworksVpcEndpoints {
    dataplaneRelays: pulumi.Input<pulumi.Input<string>[]>;
    restApis: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MwsWorkspacesCloudResourceBucket {
    gcp: pulumi.Input<inputs.MwsWorkspacesCloudResourceBucketGcp>;
}

export interface MwsWorkspacesCloudResourceBucketGcp {
    projectId: pulumi.Input<string>;
}

export interface MwsWorkspacesExternalCustomerInfo {
    authoritativeUserEmail: pulumi.Input<string>;
    authoritativeUserFullName: pulumi.Input<string>;
    customerName: pulumi.Input<string>;
}

export interface MwsWorkspacesNetwork {
    gcpCommonNetworkConfig: pulumi.Input<inputs.MwsWorkspacesNetworkGcpCommonNetworkConfig>;
    gcpManagedNetworkConfig?: pulumi.Input<inputs.MwsWorkspacesNetworkGcpManagedNetworkConfig>;
    networkId?: pulumi.Input<string>;
}

export interface MwsWorkspacesNetworkGcpCommonNetworkConfig {
    gkeClusterMasterIpRange: pulumi.Input<string>;
    gkeConnectivityType: pulumi.Input<string>;
}

export interface MwsWorkspacesNetworkGcpManagedNetworkConfig {
    gkeClusterPodIpRange: pulumi.Input<string>;
    gkeClusterServiceIpRange: pulumi.Input<string>;
    subnetCidr: pulumi.Input<string>;
}

export interface MwsWorkspacesToken {
    comment?: pulumi.Input<string>;
    lifetimeSeconds?: pulumi.Input<number>;
    tokenId?: pulumi.Input<string>;
    tokenValue?: pulumi.Input<string>;
}

export interface PermissionsAccessControl {
    groupName?: pulumi.Input<string>;
    permissionLevel: pulumi.Input<string>;
    servicePrincipalName?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}

export interface PipelineCluster {
    autoscale?: pulumi.Input<inputs.PipelineClusterAutoscale>;
    awsAttributes?: pulumi.Input<inputs.PipelineClusterAwsAttributes>;
    clusterLogConf?: pulumi.Input<inputs.PipelineClusterClusterLogConf>;
    customTags?: pulumi.Input<{[key: string]: any}>;
    driverInstancePoolId?: pulumi.Input<string>;
    driverNodeTypeId?: pulumi.Input<string>;
    gcpAttributes?: pulumi.Input<inputs.PipelineClusterGcpAttributes>;
    initScripts?: pulumi.Input<pulumi.Input<inputs.PipelineClusterInitScript>[]>;
    instancePoolId?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    nodeTypeId?: pulumi.Input<string>;
    numWorkers?: pulumi.Input<number>;
    sparkConf?: pulumi.Input<{[key: string]: any}>;
    sparkEnvVars?: pulumi.Input<{[key: string]: any}>;
    sshPublicKeys?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PipelineClusterAutoscale {
    maxWorkers?: pulumi.Input<number>;
    minWorkers?: pulumi.Input<number>;
}

export interface PipelineClusterAwsAttributes {
    firstOnDemand?: pulumi.Input<number>;
    instanceProfileArn?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

export interface PipelineClusterClusterLogConf {
    dbfs?: pulumi.Input<inputs.PipelineClusterClusterLogConfDbfs>;
    s3?: pulumi.Input<inputs.PipelineClusterClusterLogConfS3>;
}

export interface PipelineClusterClusterLogConfDbfs {
    destination: pulumi.Input<string>;
}

export interface PipelineClusterClusterLogConfS3 {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface PipelineClusterGcpAttributes {
    googleServiceAccount?: pulumi.Input<string>;
}

export interface PipelineClusterInitScript {
    dbfs?: pulumi.Input<inputs.PipelineClusterInitScriptDbfs>;
    file?: pulumi.Input<inputs.PipelineClusterInitScriptFile>;
    gcs?: pulumi.Input<inputs.PipelineClusterInitScriptGcs>;
    s3?: pulumi.Input<inputs.PipelineClusterInitScriptS3>;
}

export interface PipelineClusterInitScriptDbfs {
    destination: pulumi.Input<string>;
}

export interface PipelineClusterInitScriptFile {
    destination?: pulumi.Input<string>;
}

export interface PipelineClusterInitScriptGcs {
    destination?: pulumi.Input<string>;
}

export interface PipelineClusterInitScriptS3 {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface PipelineFilters {
    excludes?: pulumi.Input<pulumi.Input<string>[]>;
    includes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PipelineLibrary {
    jar?: pulumi.Input<string>;
    maven?: pulumi.Input<inputs.PipelineLibraryMaven>;
    notebook?: pulumi.Input<inputs.PipelineLibraryNotebook>;
    whl?: pulumi.Input<string>;
}

export interface PipelineLibraryMaven {
    coordinates: pulumi.Input<string>;
    exclusions?: pulumi.Input<pulumi.Input<string>[]>;
    repo?: pulumi.Input<string>;
}

export interface PipelineLibraryNotebook {
    path: pulumi.Input<string>;
}

export interface SecretScopeKeyvaultMetadata {
    dnsName: pulumi.Input<string>;
    resourceId: pulumi.Input<string>;
}

export interface SqlEndpointChannel {
    name?: pulumi.Input<string>;
}

export interface SqlEndpointOdbcParams {
    host?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    path: pulumi.Input<string>;
    port: pulumi.Input<number>;
    protocol: pulumi.Input<string>;
}

export interface SqlEndpointTags {
    customTags: pulumi.Input<pulumi.Input<inputs.SqlEndpointTagsCustomTag>[]>;
}

export interface SqlEndpointTagsCustomTag {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface SqlPermissionsPrivilegeAssignment {
    principal: pulumi.Input<string>;
    privileges: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SqlQueryParameter {
    date?: pulumi.Input<inputs.SqlQueryParameterDate>;
    dateRange?: pulumi.Input<inputs.SqlQueryParameterDateRange>;
    datetime?: pulumi.Input<inputs.SqlQueryParameterDatetime>;
    datetimeRange?: pulumi.Input<inputs.SqlQueryParameterDatetimeRange>;
    datetimesec?: pulumi.Input<inputs.SqlQueryParameterDatetimesec>;
    datetimesecRange?: pulumi.Input<inputs.SqlQueryParameterDatetimesecRange>;
    enum?: pulumi.Input<inputs.SqlQueryParameterEnum>;
    name: pulumi.Input<string>;
    number?: pulumi.Input<inputs.SqlQueryParameterNumber>;
    query?: pulumi.Input<inputs.SqlQueryParameterQuery>;
    text?: pulumi.Input<inputs.SqlQueryParameterText>;
    title?: pulumi.Input<string>;
}

export interface SqlQueryParameterDate {
    value: pulumi.Input<string>;
}

export interface SqlQueryParameterDateRange {
    value: pulumi.Input<string>;
}

export interface SqlQueryParameterDatetime {
    value: pulumi.Input<string>;
}

export interface SqlQueryParameterDatetimeRange {
    value: pulumi.Input<string>;
}

export interface SqlQueryParameterDatetimesec {
    value: pulumi.Input<string>;
}

export interface SqlQueryParameterDatetimesecRange {
    value: pulumi.Input<string>;
}

export interface SqlQueryParameterEnum {
    multiple?: pulumi.Input<inputs.SqlQueryParameterEnumMultiple>;
    options: pulumi.Input<pulumi.Input<string>[]>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SqlQueryParameterEnumMultiple {
    prefix: pulumi.Input<string>;
    separator: pulumi.Input<string>;
    suffix: pulumi.Input<string>;
}

export interface SqlQueryParameterNumber {
    value: pulumi.Input<number>;
}

export interface SqlQueryParameterQuery {
    multiple?: pulumi.Input<inputs.SqlQueryParameterQueryMultiple>;
    queryId: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SqlQueryParameterQueryMultiple {
    prefix: pulumi.Input<string>;
    separator: pulumi.Input<string>;
    suffix: pulumi.Input<string>;
}

export interface SqlQueryParameterText {
    value: pulumi.Input<string>;
}

export interface SqlQuerySchedule {
    continuous?: pulumi.Input<inputs.SqlQueryScheduleContinuous>;
    daily?: pulumi.Input<inputs.SqlQueryScheduleDaily>;
    weekly?: pulumi.Input<inputs.SqlQueryScheduleWeekly>;
}

export interface SqlQueryScheduleContinuous {
    intervalSeconds: pulumi.Input<number>;
    untilDate?: pulumi.Input<string>;
}

export interface SqlQueryScheduleDaily {
    intervalDays: pulumi.Input<number>;
    timeOfDay: pulumi.Input<string>;
    untilDate?: pulumi.Input<string>;
}

export interface SqlQueryScheduleWeekly {
    dayOfWeek: pulumi.Input<string>;
    intervalWeeks: pulumi.Input<number>;
    timeOfDay: pulumi.Input<string>;
    untilDate?: pulumi.Input<string>;
}

export interface SqlWidgetParameter {
    mapTo?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SqlWidgetPosition {
    autoHeight?: pulumi.Input<boolean>;
    posX?: pulumi.Input<number>;
    posY?: pulumi.Input<number>;
    sizeX: pulumi.Input<number>;
    sizeY: pulumi.Input<number>;
}

export interface StorageCredentialAwsIamRole {
    roleArn: pulumi.Input<string>;
}

export interface StorageCredentialAzureManagedIdentity {
    accessConnectorId: pulumi.Input<string>;
}

export interface StorageCredentialAzureServicePrincipal {
    applicationId: pulumi.Input<string>;
    clientSecret: pulumi.Input<string>;
    directoryId: pulumi.Input<string>;
}

export interface TableColumn {
    comment?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nullable?: pulumi.Input<boolean>;
    partitionIndex?: pulumi.Input<number>;
    position: pulumi.Input<number>;
    typeIntervalType?: pulumi.Input<string>;
    typeJson?: pulumi.Input<string>;
    typeName: pulumi.Input<string>;
    typePrecision?: pulumi.Input<number>;
    typeScale?: pulumi.Input<number>;
    typeText: pulumi.Input<string>;
}
