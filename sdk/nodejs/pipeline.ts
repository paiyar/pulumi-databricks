// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class Pipeline extends pulumi.CustomResource {
    /**
     * Get an existing Pipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PipelineState, opts?: pulumi.CustomResourceOptions): Pipeline {
        return new Pipeline(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/pipeline:Pipeline';

    /**
     * Returns true if the given object is an instance of Pipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Pipeline {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pipeline.__pulumiType;
    }

    public readonly allowDuplicateNames!: pulumi.Output<boolean | undefined>;
    public readonly channel!: pulumi.Output<string | undefined>;
    public readonly clusters!: pulumi.Output<outputs.PipelineCluster[] | undefined>;
    public readonly configuration!: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly continuous!: pulumi.Output<boolean | undefined>;
    public readonly development!: pulumi.Output<boolean | undefined>;
    public readonly edition!: pulumi.Output<string | undefined>;
    public readonly filters!: pulumi.Output<outputs.PipelineFilters | undefined>;
    public readonly id!: pulumi.Output<string>;
    public readonly libraries!: pulumi.Output<outputs.PipelineLibrary[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly photon!: pulumi.Output<boolean | undefined>;
    public readonly storage!: pulumi.Output<string | undefined>;
    public readonly target!: pulumi.Output<string | undefined>;
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a Pipeline resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PipelineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PipelineArgs | PipelineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PipelineState | undefined;
            resourceInputs["allowDuplicateNames"] = state ? state.allowDuplicateNames : undefined;
            resourceInputs["channel"] = state ? state.channel : undefined;
            resourceInputs["clusters"] = state ? state.clusters : undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["continuous"] = state ? state.continuous : undefined;
            resourceInputs["development"] = state ? state.development : undefined;
            resourceInputs["edition"] = state ? state.edition : undefined;
            resourceInputs["filters"] = state ? state.filters : undefined;
            resourceInputs["id"] = state ? state.id : undefined;
            resourceInputs["libraries"] = state ? state.libraries : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["photon"] = state ? state.photon : undefined;
            resourceInputs["storage"] = state ? state.storage : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as PipelineArgs | undefined;
            resourceInputs["allowDuplicateNames"] = args ? args.allowDuplicateNames : undefined;
            resourceInputs["channel"] = args ? args.channel : undefined;
            resourceInputs["clusters"] = args ? args.clusters : undefined;
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["continuous"] = args ? args.continuous : undefined;
            resourceInputs["development"] = args ? args.development : undefined;
            resourceInputs["edition"] = args ? args.edition : undefined;
            resourceInputs["filters"] = args ? args.filters : undefined;
            resourceInputs["id"] = args ? args.id : undefined;
            resourceInputs["libraries"] = args ? args.libraries : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["photon"] = args ? args.photon : undefined;
            resourceInputs["storage"] = args ? args.storage : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Pipeline.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Pipeline resources.
 */
export interface PipelineState {
    allowDuplicateNames?: pulumi.Input<boolean>;
    channel?: pulumi.Input<string>;
    clusters?: pulumi.Input<pulumi.Input<inputs.PipelineCluster>[]>;
    configuration?: pulumi.Input<{[key: string]: any}>;
    continuous?: pulumi.Input<boolean>;
    development?: pulumi.Input<boolean>;
    edition?: pulumi.Input<string>;
    filters?: pulumi.Input<inputs.PipelineFilters>;
    id?: pulumi.Input<string>;
    libraries?: pulumi.Input<pulumi.Input<inputs.PipelineLibrary>[]>;
    name?: pulumi.Input<string>;
    photon?: pulumi.Input<boolean>;
    storage?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Pipeline resource.
 */
export interface PipelineArgs {
    allowDuplicateNames?: pulumi.Input<boolean>;
    channel?: pulumi.Input<string>;
    clusters?: pulumi.Input<pulumi.Input<inputs.PipelineCluster>[]>;
    configuration?: pulumi.Input<{[key: string]: any}>;
    continuous?: pulumi.Input<boolean>;
    development?: pulumi.Input<boolean>;
    edition?: pulumi.Input<string>;
    filters?: pulumi.Input<inputs.PipelineFilters>;
    id?: pulumi.Input<string>;
    libraries?: pulumi.Input<pulumi.Input<inputs.PipelineLibrary>[]>;
    name?: pulumi.Input<string>;
    photon?: pulumi.Input<boolean>;
    storage?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
}
