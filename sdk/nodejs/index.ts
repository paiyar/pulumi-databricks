// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./awsS3Mount";
export * from "./azureAdlsGen1Mount";
export * from "./azureAdlsGen2Mount";
export * from "./azureBlobMount";
export * from "./catalog";
export * from "./cluster";
export * from "./clusterPolicy";
export * from "./dbfsFile";
export * from "./directory";
export * from "./externalLocation";
export * from "./getAwsAssumeRolePolicy";
export * from "./getAwsBucketPolicy";
export * from "./getAwsCrossaccountPolicy";
export * from "./getCatalogs";
export * from "./getCluster";
export * from "./getClusters";
export * from "./getCurrentUser";
export * from "./getDbfsFile";
export * from "./getDbfsFilePaths";
export * from "./getGroup";
export * from "./getJobs";
export * from "./getMwsWorkspaces";
export * from "./getNodeType";
export * from "./getNotebook";
export * from "./getNotebookPaths";
export * from "./getSchemas";
export * from "./getServicePrincipal";
export * from "./getServicePrincipals";
export * from "./getSparkVersion";
export * from "./getSqlWarehouse";
export * from "./getSqlWarehouses";
export * from "./getTables";
export * from "./getUser";
export * from "./getViews";
export * from "./getZones";
export * from "./gitCredential";
export * from "./globalInitScript";
export * from "./grants";
export * from "./group";
export * from "./groupInstanceProfile";
export * from "./groupMember";
export * from "./instancePool";
export * from "./instanceProfile";
export * from "./ipAccessList";
export * from "./job";
export * from "./library";
export * from "./metastore";
export * from "./metastoreAssignment";
export * from "./metastoreDataAccess";
export * from "./mlflowExperiment";
export * from "./mlflowModel";
export * from "./mlflowWebhook";
export * from "./mount";
export * from "./mwsCredentials";
export * from "./mwsCustomerManagedKeys";
export * from "./mwsLogDelivery";
export * from "./mwsNetworks";
export * from "./mwsPermissionAssignment";
export * from "./mwsPrivateAccessSettings";
export * from "./mwsStorageConfigurations";
export * from "./mwsVpcEndpoint";
export * from "./mwsWorkspaces";
export * from "./notebook";
export * from "./oboToken";
export * from "./permissionAssignment";
export * from "./permissions";
export * from "./pipeline";
export * from "./provider";
export * from "./repo";
export * from "./schema";
export * from "./secret";
export * from "./secretAcl";
export * from "./secretScope";
export * from "./servicePrincipal";
export * from "./servicePrincipalRole";
export * from "./sqlDashboard";
export * from "./sqlEndpoint";
export * from "./sqlGlobalConfig";
export * from "./sqlPermissions";
export * from "./sqlQuery";
export * from "./sqlVisualization";
export * from "./sqlWidget";
export * from "./storageCredential";
export * from "./table";
export * from "./token";
export * from "./user";
export * from "./userInstanceProfile";
export * from "./userRole";
export * from "./workspaceConf";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { AwsS3Mount } from "./awsS3Mount";
import { AzureAdlsGen1Mount } from "./azureAdlsGen1Mount";
import { AzureAdlsGen2Mount } from "./azureAdlsGen2Mount";
import { AzureBlobMount } from "./azureBlobMount";
import { Catalog } from "./catalog";
import { Cluster } from "./cluster";
import { ClusterPolicy } from "./clusterPolicy";
import { DbfsFile } from "./dbfsFile";
import { Directory } from "./directory";
import { ExternalLocation } from "./externalLocation";
import { GitCredential } from "./gitCredential";
import { GlobalInitScript } from "./globalInitScript";
import { Grants } from "./grants";
import { Group } from "./group";
import { GroupInstanceProfile } from "./groupInstanceProfile";
import { GroupMember } from "./groupMember";
import { InstancePool } from "./instancePool";
import { InstanceProfile } from "./instanceProfile";
import { IpAccessList } from "./ipAccessList";
import { Job } from "./job";
import { Library } from "./library";
import { Metastore } from "./metastore";
import { MetastoreAssignment } from "./metastoreAssignment";
import { MetastoreDataAccess } from "./metastoreDataAccess";
import { MlflowExperiment } from "./mlflowExperiment";
import { MlflowModel } from "./mlflowModel";
import { MlflowWebhook } from "./mlflowWebhook";
import { Mount } from "./mount";
import { MwsCredentials } from "./mwsCredentials";
import { MwsCustomerManagedKeys } from "./mwsCustomerManagedKeys";
import { MwsLogDelivery } from "./mwsLogDelivery";
import { MwsNetworks } from "./mwsNetworks";
import { MwsPermissionAssignment } from "./mwsPermissionAssignment";
import { MwsPrivateAccessSettings } from "./mwsPrivateAccessSettings";
import { MwsStorageConfigurations } from "./mwsStorageConfigurations";
import { MwsVpcEndpoint } from "./mwsVpcEndpoint";
import { MwsWorkspaces } from "./mwsWorkspaces";
import { Notebook } from "./notebook";
import { OboToken } from "./oboToken";
import { PermissionAssignment } from "./permissionAssignment";
import { Permissions } from "./permissions";
import { Pipeline } from "./pipeline";
import { Repo } from "./repo";
import { Schema } from "./schema";
import { Secret } from "./secret";
import { SecretAcl } from "./secretAcl";
import { SecretScope } from "./secretScope";
import { ServicePrincipal } from "./servicePrincipal";
import { ServicePrincipalRole } from "./servicePrincipalRole";
import { SqlDashboard } from "./sqlDashboard";
import { SqlEndpoint } from "./sqlEndpoint";
import { SqlGlobalConfig } from "./sqlGlobalConfig";
import { SqlPermissions } from "./sqlPermissions";
import { SqlQuery } from "./sqlQuery";
import { SqlVisualization } from "./sqlVisualization";
import { SqlWidget } from "./sqlWidget";
import { StorageCredential } from "./storageCredential";
import { Table } from "./table";
import { Token } from "./token";
import { User } from "./user";
import { UserInstanceProfile } from "./userInstanceProfile";
import { UserRole } from "./userRole";
import { WorkspaceConf } from "./workspaceConf";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "databricks:index/awsS3Mount:AwsS3Mount":
                return new AwsS3Mount(name, <any>undefined, { urn })
            case "databricks:index/azureAdlsGen1Mount:AzureAdlsGen1Mount":
                return new AzureAdlsGen1Mount(name, <any>undefined, { urn })
            case "databricks:index/azureAdlsGen2Mount:AzureAdlsGen2Mount":
                return new AzureAdlsGen2Mount(name, <any>undefined, { urn })
            case "databricks:index/azureBlobMount:AzureBlobMount":
                return new AzureBlobMount(name, <any>undefined, { urn })
            case "databricks:index/catalog:Catalog":
                return new Catalog(name, <any>undefined, { urn })
            case "databricks:index/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "databricks:index/clusterPolicy:ClusterPolicy":
                return new ClusterPolicy(name, <any>undefined, { urn })
            case "databricks:index/dbfsFile:DbfsFile":
                return new DbfsFile(name, <any>undefined, { urn })
            case "databricks:index/directory:Directory":
                return new Directory(name, <any>undefined, { urn })
            case "databricks:index/externalLocation:ExternalLocation":
                return new ExternalLocation(name, <any>undefined, { urn })
            case "databricks:index/gitCredential:GitCredential":
                return new GitCredential(name, <any>undefined, { urn })
            case "databricks:index/globalInitScript:GlobalInitScript":
                return new GlobalInitScript(name, <any>undefined, { urn })
            case "databricks:index/grants:Grants":
                return new Grants(name, <any>undefined, { urn })
            case "databricks:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "databricks:index/groupInstanceProfile:GroupInstanceProfile":
                return new GroupInstanceProfile(name, <any>undefined, { urn })
            case "databricks:index/groupMember:GroupMember":
                return new GroupMember(name, <any>undefined, { urn })
            case "databricks:index/instancePool:InstancePool":
                return new InstancePool(name, <any>undefined, { urn })
            case "databricks:index/instanceProfile:InstanceProfile":
                return new InstanceProfile(name, <any>undefined, { urn })
            case "databricks:index/ipAccessList:IpAccessList":
                return new IpAccessList(name, <any>undefined, { urn })
            case "databricks:index/job:Job":
                return new Job(name, <any>undefined, { urn })
            case "databricks:index/library:Library":
                return new Library(name, <any>undefined, { urn })
            case "databricks:index/metastore:Metastore":
                return new Metastore(name, <any>undefined, { urn })
            case "databricks:index/metastoreAssignment:MetastoreAssignment":
                return new MetastoreAssignment(name, <any>undefined, { urn })
            case "databricks:index/metastoreDataAccess:MetastoreDataAccess":
                return new MetastoreDataAccess(name, <any>undefined, { urn })
            case "databricks:index/mlflowExperiment:MlflowExperiment":
                return new MlflowExperiment(name, <any>undefined, { urn })
            case "databricks:index/mlflowModel:MlflowModel":
                return new MlflowModel(name, <any>undefined, { urn })
            case "databricks:index/mlflowWebhook:MlflowWebhook":
                return new MlflowWebhook(name, <any>undefined, { urn })
            case "databricks:index/mount:Mount":
                return new Mount(name, <any>undefined, { urn })
            case "databricks:index/mwsCredentials:MwsCredentials":
                return new MwsCredentials(name, <any>undefined, { urn })
            case "databricks:index/mwsCustomerManagedKeys:MwsCustomerManagedKeys":
                return new MwsCustomerManagedKeys(name, <any>undefined, { urn })
            case "databricks:index/mwsLogDelivery:MwsLogDelivery":
                return new MwsLogDelivery(name, <any>undefined, { urn })
            case "databricks:index/mwsNetworks:MwsNetworks":
                return new MwsNetworks(name, <any>undefined, { urn })
            case "databricks:index/mwsPermissionAssignment:MwsPermissionAssignment":
                return new MwsPermissionAssignment(name, <any>undefined, { urn })
            case "databricks:index/mwsPrivateAccessSettings:MwsPrivateAccessSettings":
                return new MwsPrivateAccessSettings(name, <any>undefined, { urn })
            case "databricks:index/mwsStorageConfigurations:MwsStorageConfigurations":
                return new MwsStorageConfigurations(name, <any>undefined, { urn })
            case "databricks:index/mwsVpcEndpoint:MwsVpcEndpoint":
                return new MwsVpcEndpoint(name, <any>undefined, { urn })
            case "databricks:index/mwsWorkspaces:MwsWorkspaces":
                return new MwsWorkspaces(name, <any>undefined, { urn })
            case "databricks:index/notebook:Notebook":
                return new Notebook(name, <any>undefined, { urn })
            case "databricks:index/oboToken:OboToken":
                return new OboToken(name, <any>undefined, { urn })
            case "databricks:index/permissionAssignment:PermissionAssignment":
                return new PermissionAssignment(name, <any>undefined, { urn })
            case "databricks:index/permissions:Permissions":
                return new Permissions(name, <any>undefined, { urn })
            case "databricks:index/pipeline:Pipeline":
                return new Pipeline(name, <any>undefined, { urn })
            case "databricks:index/repo:Repo":
                return new Repo(name, <any>undefined, { urn })
            case "databricks:index/schema:Schema":
                return new Schema(name, <any>undefined, { urn })
            case "databricks:index/secret:Secret":
                return new Secret(name, <any>undefined, { urn })
            case "databricks:index/secretAcl:SecretAcl":
                return new SecretAcl(name, <any>undefined, { urn })
            case "databricks:index/secretScope:SecretScope":
                return new SecretScope(name, <any>undefined, { urn })
            case "databricks:index/servicePrincipal:ServicePrincipal":
                return new ServicePrincipal(name, <any>undefined, { urn })
            case "databricks:index/servicePrincipalRole:ServicePrincipalRole":
                return new ServicePrincipalRole(name, <any>undefined, { urn })
            case "databricks:index/sqlDashboard:SqlDashboard":
                return new SqlDashboard(name, <any>undefined, { urn })
            case "databricks:index/sqlEndpoint:SqlEndpoint":
                return new SqlEndpoint(name, <any>undefined, { urn })
            case "databricks:index/sqlGlobalConfig:SqlGlobalConfig":
                return new SqlGlobalConfig(name, <any>undefined, { urn })
            case "databricks:index/sqlPermissions:SqlPermissions":
                return new SqlPermissions(name, <any>undefined, { urn })
            case "databricks:index/sqlQuery:SqlQuery":
                return new SqlQuery(name, <any>undefined, { urn })
            case "databricks:index/sqlVisualization:SqlVisualization":
                return new SqlVisualization(name, <any>undefined, { urn })
            case "databricks:index/sqlWidget:SqlWidget":
                return new SqlWidget(name, <any>undefined, { urn })
            case "databricks:index/storageCredential:StorageCredential":
                return new StorageCredential(name, <any>undefined, { urn })
            case "databricks:index/table:Table":
                return new Table(name, <any>undefined, { urn })
            case "databricks:index/token:Token":
                return new Token(name, <any>undefined, { urn })
            case "databricks:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "databricks:index/userInstanceProfile:UserInstanceProfile":
                return new UserInstanceProfile(name, <any>undefined, { urn })
            case "databricks:index/userRole:UserRole":
                return new UserRole(name, <any>undefined, { urn })
            case "databricks:index/workspaceConf:WorkspaceConf":
                return new WorkspaceConf(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("databricks", "index/awsS3Mount", _module)
pulumi.runtime.registerResourceModule("databricks", "index/azureAdlsGen1Mount", _module)
pulumi.runtime.registerResourceModule("databricks", "index/azureAdlsGen2Mount", _module)
pulumi.runtime.registerResourceModule("databricks", "index/azureBlobMount", _module)
pulumi.runtime.registerResourceModule("databricks", "index/catalog", _module)
pulumi.runtime.registerResourceModule("databricks", "index/cluster", _module)
pulumi.runtime.registerResourceModule("databricks", "index/clusterPolicy", _module)
pulumi.runtime.registerResourceModule("databricks", "index/dbfsFile", _module)
pulumi.runtime.registerResourceModule("databricks", "index/directory", _module)
pulumi.runtime.registerResourceModule("databricks", "index/externalLocation", _module)
pulumi.runtime.registerResourceModule("databricks", "index/gitCredential", _module)
pulumi.runtime.registerResourceModule("databricks", "index/globalInitScript", _module)
pulumi.runtime.registerResourceModule("databricks", "index/grants", _module)
pulumi.runtime.registerResourceModule("databricks", "index/group", _module)
pulumi.runtime.registerResourceModule("databricks", "index/groupInstanceProfile", _module)
pulumi.runtime.registerResourceModule("databricks", "index/groupMember", _module)
pulumi.runtime.registerResourceModule("databricks", "index/instancePool", _module)
pulumi.runtime.registerResourceModule("databricks", "index/instanceProfile", _module)
pulumi.runtime.registerResourceModule("databricks", "index/ipAccessList", _module)
pulumi.runtime.registerResourceModule("databricks", "index/job", _module)
pulumi.runtime.registerResourceModule("databricks", "index/library", _module)
pulumi.runtime.registerResourceModule("databricks", "index/metastore", _module)
pulumi.runtime.registerResourceModule("databricks", "index/metastoreAssignment", _module)
pulumi.runtime.registerResourceModule("databricks", "index/metastoreDataAccess", _module)
pulumi.runtime.registerResourceModule("databricks", "index/mlflowExperiment", _module)
pulumi.runtime.registerResourceModule("databricks", "index/mlflowModel", _module)
pulumi.runtime.registerResourceModule("databricks", "index/mlflowWebhook", _module)
pulumi.runtime.registerResourceModule("databricks", "index/mount", _module)
pulumi.runtime.registerResourceModule("databricks", "index/mwsCredentials", _module)
pulumi.runtime.registerResourceModule("databricks", "index/mwsCustomerManagedKeys", _module)
pulumi.runtime.registerResourceModule("databricks", "index/mwsLogDelivery", _module)
pulumi.runtime.registerResourceModule("databricks", "index/mwsNetworks", _module)
pulumi.runtime.registerResourceModule("databricks", "index/mwsPermissionAssignment", _module)
pulumi.runtime.registerResourceModule("databricks", "index/mwsPrivateAccessSettings", _module)
pulumi.runtime.registerResourceModule("databricks", "index/mwsStorageConfigurations", _module)
pulumi.runtime.registerResourceModule("databricks", "index/mwsVpcEndpoint", _module)
pulumi.runtime.registerResourceModule("databricks", "index/mwsWorkspaces", _module)
pulumi.runtime.registerResourceModule("databricks", "index/notebook", _module)
pulumi.runtime.registerResourceModule("databricks", "index/oboToken", _module)
pulumi.runtime.registerResourceModule("databricks", "index/permissionAssignment", _module)
pulumi.runtime.registerResourceModule("databricks", "index/permissions", _module)
pulumi.runtime.registerResourceModule("databricks", "index/pipeline", _module)
pulumi.runtime.registerResourceModule("databricks", "index/repo", _module)
pulumi.runtime.registerResourceModule("databricks", "index/schema", _module)
pulumi.runtime.registerResourceModule("databricks", "index/secret", _module)
pulumi.runtime.registerResourceModule("databricks", "index/secretAcl", _module)
pulumi.runtime.registerResourceModule("databricks", "index/secretScope", _module)
pulumi.runtime.registerResourceModule("databricks", "index/servicePrincipal", _module)
pulumi.runtime.registerResourceModule("databricks", "index/servicePrincipalRole", _module)
pulumi.runtime.registerResourceModule("databricks", "index/sqlDashboard", _module)
pulumi.runtime.registerResourceModule("databricks", "index/sqlEndpoint", _module)
pulumi.runtime.registerResourceModule("databricks", "index/sqlGlobalConfig", _module)
pulumi.runtime.registerResourceModule("databricks", "index/sqlPermissions", _module)
pulumi.runtime.registerResourceModule("databricks", "index/sqlQuery", _module)
pulumi.runtime.registerResourceModule("databricks", "index/sqlVisualization", _module)
pulumi.runtime.registerResourceModule("databricks", "index/sqlWidget", _module)
pulumi.runtime.registerResourceModule("databricks", "index/storageCredential", _module)
pulumi.runtime.registerResourceModule("databricks", "index/table", _module)
pulumi.runtime.registerResourceModule("databricks", "index/token", _module)
pulumi.runtime.registerResourceModule("databricks", "index/user", _module)
pulumi.runtime.registerResourceModule("databricks", "index/userInstanceProfile", _module)
pulumi.runtime.registerResourceModule("databricks", "index/userRole", _module)
pulumi.runtime.registerResourceModule("databricks", "index/workspaceConf", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("databricks", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:databricks") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
