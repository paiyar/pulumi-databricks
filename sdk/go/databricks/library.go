// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Library struct {
	pulumi.CustomResourceState

	ClusterId pulumi.StringOutput    `pulumi:"clusterId"`
	Cran      LibraryCranPtrOutput   `pulumi:"cran"`
	Egg       pulumi.StringPtrOutput `pulumi:"egg"`
	Jar       pulumi.StringPtrOutput `pulumi:"jar"`
	Maven     LibraryMavenPtrOutput  `pulumi:"maven"`
	Pypi      LibraryPypiPtrOutput   `pulumi:"pypi"`
	Whl       pulumi.StringPtrOutput `pulumi:"whl"`
}

// NewLibrary registers a new resource with the given unique name, arguments, and options.
func NewLibrary(ctx *pulumi.Context,
	name string, args *LibraryArgs, opts ...pulumi.ResourceOption) (*Library, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	var resource Library
	err := ctx.RegisterResource("databricks:index/library:Library", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLibrary gets an existing Library resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLibrary(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LibraryState, opts ...pulumi.ResourceOption) (*Library, error) {
	var resource Library
	err := ctx.ReadResource("databricks:index/library:Library", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Library resources.
type libraryState struct {
	ClusterId *string       `pulumi:"clusterId"`
	Cran      *LibraryCran  `pulumi:"cran"`
	Egg       *string       `pulumi:"egg"`
	Jar       *string       `pulumi:"jar"`
	Maven     *LibraryMaven `pulumi:"maven"`
	Pypi      *LibraryPypi  `pulumi:"pypi"`
	Whl       *string       `pulumi:"whl"`
}

type LibraryState struct {
	ClusterId pulumi.StringPtrInput
	Cran      LibraryCranPtrInput
	Egg       pulumi.StringPtrInput
	Jar       pulumi.StringPtrInput
	Maven     LibraryMavenPtrInput
	Pypi      LibraryPypiPtrInput
	Whl       pulumi.StringPtrInput
}

func (LibraryState) ElementType() reflect.Type {
	return reflect.TypeOf((*libraryState)(nil)).Elem()
}

type libraryArgs struct {
	ClusterId string        `pulumi:"clusterId"`
	Cran      *LibraryCran  `pulumi:"cran"`
	Egg       *string       `pulumi:"egg"`
	Jar       *string       `pulumi:"jar"`
	Maven     *LibraryMaven `pulumi:"maven"`
	Pypi      *LibraryPypi  `pulumi:"pypi"`
	Whl       *string       `pulumi:"whl"`
}

// The set of arguments for constructing a Library resource.
type LibraryArgs struct {
	ClusterId pulumi.StringInput
	Cran      LibraryCranPtrInput
	Egg       pulumi.StringPtrInput
	Jar       pulumi.StringPtrInput
	Maven     LibraryMavenPtrInput
	Pypi      LibraryPypiPtrInput
	Whl       pulumi.StringPtrInput
}

func (LibraryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*libraryArgs)(nil)).Elem()
}

type LibraryInput interface {
	pulumi.Input

	ToLibraryOutput() LibraryOutput
	ToLibraryOutputWithContext(ctx context.Context) LibraryOutput
}

func (*Library) ElementType() reflect.Type {
	return reflect.TypeOf((**Library)(nil)).Elem()
}

func (i *Library) ToLibraryOutput() LibraryOutput {
	return i.ToLibraryOutputWithContext(context.Background())
}

func (i *Library) ToLibraryOutputWithContext(ctx context.Context) LibraryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LibraryOutput)
}

// LibraryArrayInput is an input type that accepts LibraryArray and LibraryArrayOutput values.
// You can construct a concrete instance of `LibraryArrayInput` via:
//
//          LibraryArray{ LibraryArgs{...} }
type LibraryArrayInput interface {
	pulumi.Input

	ToLibraryArrayOutput() LibraryArrayOutput
	ToLibraryArrayOutputWithContext(context.Context) LibraryArrayOutput
}

type LibraryArray []LibraryInput

func (LibraryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Library)(nil)).Elem()
}

func (i LibraryArray) ToLibraryArrayOutput() LibraryArrayOutput {
	return i.ToLibraryArrayOutputWithContext(context.Background())
}

func (i LibraryArray) ToLibraryArrayOutputWithContext(ctx context.Context) LibraryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LibraryArrayOutput)
}

// LibraryMapInput is an input type that accepts LibraryMap and LibraryMapOutput values.
// You can construct a concrete instance of `LibraryMapInput` via:
//
//          LibraryMap{ "key": LibraryArgs{...} }
type LibraryMapInput interface {
	pulumi.Input

	ToLibraryMapOutput() LibraryMapOutput
	ToLibraryMapOutputWithContext(context.Context) LibraryMapOutput
}

type LibraryMap map[string]LibraryInput

func (LibraryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Library)(nil)).Elem()
}

func (i LibraryMap) ToLibraryMapOutput() LibraryMapOutput {
	return i.ToLibraryMapOutputWithContext(context.Background())
}

func (i LibraryMap) ToLibraryMapOutputWithContext(ctx context.Context) LibraryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LibraryMapOutput)
}

type LibraryOutput struct{ *pulumi.OutputState }

func (LibraryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Library)(nil)).Elem()
}

func (o LibraryOutput) ToLibraryOutput() LibraryOutput {
	return o
}

func (o LibraryOutput) ToLibraryOutputWithContext(ctx context.Context) LibraryOutput {
	return o
}

type LibraryArrayOutput struct{ *pulumi.OutputState }

func (LibraryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Library)(nil)).Elem()
}

func (o LibraryArrayOutput) ToLibraryArrayOutput() LibraryArrayOutput {
	return o
}

func (o LibraryArrayOutput) ToLibraryArrayOutputWithContext(ctx context.Context) LibraryArrayOutput {
	return o
}

func (o LibraryArrayOutput) Index(i pulumi.IntInput) LibraryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Library {
		return vs[0].([]*Library)[vs[1].(int)]
	}).(LibraryOutput)
}

type LibraryMapOutput struct{ *pulumi.OutputState }

func (LibraryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Library)(nil)).Elem()
}

func (o LibraryMapOutput) ToLibraryMapOutput() LibraryMapOutput {
	return o
}

func (o LibraryMapOutput) ToLibraryMapOutputWithContext(ctx context.Context) LibraryMapOutput {
	return o
}

func (o LibraryMapOutput) MapIndex(k pulumi.StringInput) LibraryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Library {
		return vs[0].(map[string]*Library)[vs[1].(string)]
	}).(LibraryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LibraryInput)(nil)).Elem(), &Library{})
	pulumi.RegisterInputType(reflect.TypeOf((*LibraryArrayInput)(nil)).Elem(), LibraryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LibraryMapInput)(nil)).Elem(), LibraryMap{})
	pulumi.RegisterOutputType(LibraryOutput{})
	pulumi.RegisterOutputType(LibraryArrayOutput{})
	pulumi.RegisterOutputType(LibraryMapOutput{})
}
