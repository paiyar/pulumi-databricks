// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Job struct {
	pulumi.CustomResourceState

	AlwaysRunning          pulumi.BoolPtrOutput           `pulumi:"alwaysRunning"`
	EmailNotifications     JobEmailNotificationsPtrOutput `pulumi:"emailNotifications"`
	ExistingClusterId      pulumi.StringPtrOutput         `pulumi:"existingClusterId"`
	Format                 pulumi.StringOutput            `pulumi:"format"`
	GitSource              JobGitSourcePtrOutput          `pulumi:"gitSource"`
	JobClusters            JobJobClusterArrayOutput       `pulumi:"jobClusters"`
	Libraries              JobLibraryArrayOutput          `pulumi:"libraries"`
	MaxConcurrentRuns      pulumi.IntPtrOutput            `pulumi:"maxConcurrentRuns"`
	MaxRetries             pulumi.IntPtrOutput            `pulumi:"maxRetries"`
	MinRetryIntervalMillis pulumi.IntPtrOutput            `pulumi:"minRetryIntervalMillis"`
	Name                   pulumi.StringOutput            `pulumi:"name"`
	NewCluster             JobNewClusterPtrOutput         `pulumi:"newCluster"`
	NotebookTask           JobNotebookTaskPtrOutput       `pulumi:"notebookTask"`
	PipelineTask           JobPipelineTaskPtrOutput       `pulumi:"pipelineTask"`
	PythonWheelTask        JobPythonWheelTaskPtrOutput    `pulumi:"pythonWheelTask"`
	RetryOnTimeout         pulumi.BoolPtrOutput           `pulumi:"retryOnTimeout"`
	Schedule               JobSchedulePtrOutput           `pulumi:"schedule"`
	SparkJarTask           JobSparkJarTaskPtrOutput       `pulumi:"sparkJarTask"`
	SparkPythonTask        JobSparkPythonTaskPtrOutput    `pulumi:"sparkPythonTask"`
	SparkSubmitTask        JobSparkSubmitTaskPtrOutput    `pulumi:"sparkSubmitTask"`
	Tags                   pulumi.MapOutput               `pulumi:"tags"`
	Tasks                  JobTaskArrayOutput             `pulumi:"tasks"`
	TimeoutSeconds         pulumi.IntPtrOutput            `pulumi:"timeoutSeconds"`
	Url                    pulumi.StringOutput            `pulumi:"url"`
}

// NewJob registers a new resource with the given unique name, arguments, and options.
func NewJob(ctx *pulumi.Context,
	name string, args *JobArgs, opts ...pulumi.ResourceOption) (*Job, error) {
	if args == nil {
		args = &JobArgs{}
	}

	var resource Job
	err := ctx.RegisterResource("databricks:index/job:Job", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJob gets an existing Job resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobState, opts ...pulumi.ResourceOption) (*Job, error) {
	var resource Job
	err := ctx.ReadResource("databricks:index/job:Job", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Job resources.
type jobState struct {
	AlwaysRunning          *bool                  `pulumi:"alwaysRunning"`
	EmailNotifications     *JobEmailNotifications `pulumi:"emailNotifications"`
	ExistingClusterId      *string                `pulumi:"existingClusterId"`
	Format                 *string                `pulumi:"format"`
	GitSource              *JobGitSource          `pulumi:"gitSource"`
	JobClusters            []JobJobCluster        `pulumi:"jobClusters"`
	Libraries              []JobLibrary           `pulumi:"libraries"`
	MaxConcurrentRuns      *int                   `pulumi:"maxConcurrentRuns"`
	MaxRetries             *int                   `pulumi:"maxRetries"`
	MinRetryIntervalMillis *int                   `pulumi:"minRetryIntervalMillis"`
	Name                   *string                `pulumi:"name"`
	NewCluster             *JobNewCluster         `pulumi:"newCluster"`
	NotebookTask           *JobNotebookTask       `pulumi:"notebookTask"`
	PipelineTask           *JobPipelineTask       `pulumi:"pipelineTask"`
	PythonWheelTask        *JobPythonWheelTask    `pulumi:"pythonWheelTask"`
	RetryOnTimeout         *bool                  `pulumi:"retryOnTimeout"`
	Schedule               *JobSchedule           `pulumi:"schedule"`
	SparkJarTask           *JobSparkJarTask       `pulumi:"sparkJarTask"`
	SparkPythonTask        *JobSparkPythonTask    `pulumi:"sparkPythonTask"`
	SparkSubmitTask        *JobSparkSubmitTask    `pulumi:"sparkSubmitTask"`
	Tags                   map[string]interface{} `pulumi:"tags"`
	Tasks                  []JobTask              `pulumi:"tasks"`
	TimeoutSeconds         *int                   `pulumi:"timeoutSeconds"`
	Url                    *string                `pulumi:"url"`
}

type JobState struct {
	AlwaysRunning          pulumi.BoolPtrInput
	EmailNotifications     JobEmailNotificationsPtrInput
	ExistingClusterId      pulumi.StringPtrInput
	Format                 pulumi.StringPtrInput
	GitSource              JobGitSourcePtrInput
	JobClusters            JobJobClusterArrayInput
	Libraries              JobLibraryArrayInput
	MaxConcurrentRuns      pulumi.IntPtrInput
	MaxRetries             pulumi.IntPtrInput
	MinRetryIntervalMillis pulumi.IntPtrInput
	Name                   pulumi.StringPtrInput
	NewCluster             JobNewClusterPtrInput
	NotebookTask           JobNotebookTaskPtrInput
	PipelineTask           JobPipelineTaskPtrInput
	PythonWheelTask        JobPythonWheelTaskPtrInput
	RetryOnTimeout         pulumi.BoolPtrInput
	Schedule               JobSchedulePtrInput
	SparkJarTask           JobSparkJarTaskPtrInput
	SparkPythonTask        JobSparkPythonTaskPtrInput
	SparkSubmitTask        JobSparkSubmitTaskPtrInput
	Tags                   pulumi.MapInput
	Tasks                  JobTaskArrayInput
	TimeoutSeconds         pulumi.IntPtrInput
	Url                    pulumi.StringPtrInput
}

func (JobState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobState)(nil)).Elem()
}

type jobArgs struct {
	AlwaysRunning          *bool                  `pulumi:"alwaysRunning"`
	EmailNotifications     *JobEmailNotifications `pulumi:"emailNotifications"`
	ExistingClusterId      *string                `pulumi:"existingClusterId"`
	Format                 *string                `pulumi:"format"`
	GitSource              *JobGitSource          `pulumi:"gitSource"`
	JobClusters            []JobJobCluster        `pulumi:"jobClusters"`
	Libraries              []JobLibrary           `pulumi:"libraries"`
	MaxConcurrentRuns      *int                   `pulumi:"maxConcurrentRuns"`
	MaxRetries             *int                   `pulumi:"maxRetries"`
	MinRetryIntervalMillis *int                   `pulumi:"minRetryIntervalMillis"`
	Name                   *string                `pulumi:"name"`
	NewCluster             *JobNewCluster         `pulumi:"newCluster"`
	NotebookTask           *JobNotebookTask       `pulumi:"notebookTask"`
	PipelineTask           *JobPipelineTask       `pulumi:"pipelineTask"`
	PythonWheelTask        *JobPythonWheelTask    `pulumi:"pythonWheelTask"`
	RetryOnTimeout         *bool                  `pulumi:"retryOnTimeout"`
	Schedule               *JobSchedule           `pulumi:"schedule"`
	SparkJarTask           *JobSparkJarTask       `pulumi:"sparkJarTask"`
	SparkPythonTask        *JobSparkPythonTask    `pulumi:"sparkPythonTask"`
	SparkSubmitTask        *JobSparkSubmitTask    `pulumi:"sparkSubmitTask"`
	Tags                   map[string]interface{} `pulumi:"tags"`
	Tasks                  []JobTask              `pulumi:"tasks"`
	TimeoutSeconds         *int                   `pulumi:"timeoutSeconds"`
}

// The set of arguments for constructing a Job resource.
type JobArgs struct {
	AlwaysRunning          pulumi.BoolPtrInput
	EmailNotifications     JobEmailNotificationsPtrInput
	ExistingClusterId      pulumi.StringPtrInput
	Format                 pulumi.StringPtrInput
	GitSource              JobGitSourcePtrInput
	JobClusters            JobJobClusterArrayInput
	Libraries              JobLibraryArrayInput
	MaxConcurrentRuns      pulumi.IntPtrInput
	MaxRetries             pulumi.IntPtrInput
	MinRetryIntervalMillis pulumi.IntPtrInput
	Name                   pulumi.StringPtrInput
	NewCluster             JobNewClusterPtrInput
	NotebookTask           JobNotebookTaskPtrInput
	PipelineTask           JobPipelineTaskPtrInput
	PythonWheelTask        JobPythonWheelTaskPtrInput
	RetryOnTimeout         pulumi.BoolPtrInput
	Schedule               JobSchedulePtrInput
	SparkJarTask           JobSparkJarTaskPtrInput
	SparkPythonTask        JobSparkPythonTaskPtrInput
	SparkSubmitTask        JobSparkSubmitTaskPtrInput
	Tags                   pulumi.MapInput
	Tasks                  JobTaskArrayInput
	TimeoutSeconds         pulumi.IntPtrInput
}

func (JobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobArgs)(nil)).Elem()
}

type JobInput interface {
	pulumi.Input

	ToJobOutput() JobOutput
	ToJobOutputWithContext(ctx context.Context) JobOutput
}

func (*Job) ElementType() reflect.Type {
	return reflect.TypeOf((**Job)(nil)).Elem()
}

func (i *Job) ToJobOutput() JobOutput {
	return i.ToJobOutputWithContext(context.Background())
}

func (i *Job) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutput)
}

// JobArrayInput is an input type that accepts JobArray and JobArrayOutput values.
// You can construct a concrete instance of `JobArrayInput` via:
//
//          JobArray{ JobArgs{...} }
type JobArrayInput interface {
	pulumi.Input

	ToJobArrayOutput() JobArrayOutput
	ToJobArrayOutputWithContext(context.Context) JobArrayOutput
}

type JobArray []JobInput

func (JobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Job)(nil)).Elem()
}

func (i JobArray) ToJobArrayOutput() JobArrayOutput {
	return i.ToJobArrayOutputWithContext(context.Background())
}

func (i JobArray) ToJobArrayOutputWithContext(ctx context.Context) JobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobArrayOutput)
}

// JobMapInput is an input type that accepts JobMap and JobMapOutput values.
// You can construct a concrete instance of `JobMapInput` via:
//
//          JobMap{ "key": JobArgs{...} }
type JobMapInput interface {
	pulumi.Input

	ToJobMapOutput() JobMapOutput
	ToJobMapOutputWithContext(context.Context) JobMapOutput
}

type JobMap map[string]JobInput

func (JobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Job)(nil)).Elem()
}

func (i JobMap) ToJobMapOutput() JobMapOutput {
	return i.ToJobMapOutputWithContext(context.Background())
}

func (i JobMap) ToJobMapOutputWithContext(ctx context.Context) JobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobMapOutput)
}

type JobOutput struct{ *pulumi.OutputState }

func (JobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Job)(nil)).Elem()
}

func (o JobOutput) ToJobOutput() JobOutput {
	return o
}

func (o JobOutput) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return o
}

type JobArrayOutput struct{ *pulumi.OutputState }

func (JobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Job)(nil)).Elem()
}

func (o JobArrayOutput) ToJobArrayOutput() JobArrayOutput {
	return o
}

func (o JobArrayOutput) ToJobArrayOutputWithContext(ctx context.Context) JobArrayOutput {
	return o
}

func (o JobArrayOutput) Index(i pulumi.IntInput) JobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Job {
		return vs[0].([]*Job)[vs[1].(int)]
	}).(JobOutput)
}

type JobMapOutput struct{ *pulumi.OutputState }

func (JobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Job)(nil)).Elem()
}

func (o JobMapOutput) ToJobMapOutput() JobMapOutput {
	return o
}

func (o JobMapOutput) ToJobMapOutputWithContext(ctx context.Context) JobMapOutput {
	return o
}

func (o JobMapOutput) MapIndex(k pulumi.StringInput) JobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Job {
		return vs[0].(map[string]*Job)[vs[1].(string)]
	}).(JobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobInput)(nil)).Elem(), &Job{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobArrayInput)(nil)).Elem(), JobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobMapInput)(nil)).Elem(), JobMap{})
	pulumi.RegisterOutputType(JobOutput{})
	pulumi.RegisterOutputType(JobArrayOutput{})
	pulumi.RegisterOutputType(JobMapOutput{})
}
