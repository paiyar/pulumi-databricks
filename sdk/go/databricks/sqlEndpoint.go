// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SqlEndpoint struct {
	pulumi.CustomResourceState

	AutoStopMins            pulumi.IntPtrOutput         `pulumi:"autoStopMins"`
	Channel                 SqlEndpointChannelPtrOutput `pulumi:"channel"`
	ClusterSize             pulumi.StringOutput         `pulumi:"clusterSize"`
	DataSourceId            pulumi.StringOutput         `pulumi:"dataSourceId"`
	EnablePhoton            pulumi.BoolPtrOutput        `pulumi:"enablePhoton"`
	EnableServerlessCompute pulumi.BoolPtrOutput        `pulumi:"enableServerlessCompute"`
	Id                      pulumi.StringOutput         `pulumi:"id"`
	InstanceProfileArn      pulumi.StringPtrOutput      `pulumi:"instanceProfileArn"`
	JdbcUrl                 pulumi.StringOutput         `pulumi:"jdbcUrl"`
	MaxNumClusters          pulumi.IntPtrOutput         `pulumi:"maxNumClusters"`
	MinNumClusters          pulumi.IntPtrOutput         `pulumi:"minNumClusters"`
	Name                    pulumi.StringOutput         `pulumi:"name"`
	NumClusters             pulumi.IntPtrOutput         `pulumi:"numClusters"`
	OdbcParams              SqlEndpointOdbcParamsOutput `pulumi:"odbcParams"`
	SpotInstancePolicy      pulumi.StringPtrOutput      `pulumi:"spotInstancePolicy"`
	State                   pulumi.StringOutput         `pulumi:"state"`
	Tags                    SqlEndpointTagsPtrOutput    `pulumi:"tags"`
}

// NewSqlEndpoint registers a new resource with the given unique name, arguments, and options.
func NewSqlEndpoint(ctx *pulumi.Context,
	name string, args *SqlEndpointArgs, opts ...pulumi.ResourceOption) (*SqlEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterSize == nil {
		return nil, errors.New("invalid value for required argument 'ClusterSize'")
	}
	var resource SqlEndpoint
	err := ctx.RegisterResource("databricks:index/sqlEndpoint:SqlEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlEndpoint gets an existing SqlEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlEndpointState, opts ...pulumi.ResourceOption) (*SqlEndpoint, error) {
	var resource SqlEndpoint
	err := ctx.ReadResource("databricks:index/sqlEndpoint:SqlEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlEndpoint resources.
type sqlEndpointState struct {
	AutoStopMins            *int                   `pulumi:"autoStopMins"`
	Channel                 *SqlEndpointChannel    `pulumi:"channel"`
	ClusterSize             *string                `pulumi:"clusterSize"`
	DataSourceId            *string                `pulumi:"dataSourceId"`
	EnablePhoton            *bool                  `pulumi:"enablePhoton"`
	EnableServerlessCompute *bool                  `pulumi:"enableServerlessCompute"`
	Id                      *string                `pulumi:"id"`
	InstanceProfileArn      *string                `pulumi:"instanceProfileArn"`
	JdbcUrl                 *string                `pulumi:"jdbcUrl"`
	MaxNumClusters          *int                   `pulumi:"maxNumClusters"`
	MinNumClusters          *int                   `pulumi:"minNumClusters"`
	Name                    *string                `pulumi:"name"`
	NumClusters             *int                   `pulumi:"numClusters"`
	OdbcParams              *SqlEndpointOdbcParams `pulumi:"odbcParams"`
	SpotInstancePolicy      *string                `pulumi:"spotInstancePolicy"`
	State                   *string                `pulumi:"state"`
	Tags                    *SqlEndpointTags       `pulumi:"tags"`
}

type SqlEndpointState struct {
	AutoStopMins            pulumi.IntPtrInput
	Channel                 SqlEndpointChannelPtrInput
	ClusterSize             pulumi.StringPtrInput
	DataSourceId            pulumi.StringPtrInput
	EnablePhoton            pulumi.BoolPtrInput
	EnableServerlessCompute pulumi.BoolPtrInput
	Id                      pulumi.StringPtrInput
	InstanceProfileArn      pulumi.StringPtrInput
	JdbcUrl                 pulumi.StringPtrInput
	MaxNumClusters          pulumi.IntPtrInput
	MinNumClusters          pulumi.IntPtrInput
	Name                    pulumi.StringPtrInput
	NumClusters             pulumi.IntPtrInput
	OdbcParams              SqlEndpointOdbcParamsPtrInput
	SpotInstancePolicy      pulumi.StringPtrInput
	State                   pulumi.StringPtrInput
	Tags                    SqlEndpointTagsPtrInput
}

func (SqlEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlEndpointState)(nil)).Elem()
}

type sqlEndpointArgs struct {
	AutoStopMins            *int                   `pulumi:"autoStopMins"`
	Channel                 *SqlEndpointChannel    `pulumi:"channel"`
	ClusterSize             string                 `pulumi:"clusterSize"`
	DataSourceId            *string                `pulumi:"dataSourceId"`
	EnablePhoton            *bool                  `pulumi:"enablePhoton"`
	EnableServerlessCompute *bool                  `pulumi:"enableServerlessCompute"`
	Id                      *string                `pulumi:"id"`
	InstanceProfileArn      *string                `pulumi:"instanceProfileArn"`
	JdbcUrl                 *string                `pulumi:"jdbcUrl"`
	MaxNumClusters          *int                   `pulumi:"maxNumClusters"`
	MinNumClusters          *int                   `pulumi:"minNumClusters"`
	Name                    *string                `pulumi:"name"`
	NumClusters             *int                   `pulumi:"numClusters"`
	OdbcParams              *SqlEndpointOdbcParams `pulumi:"odbcParams"`
	SpotInstancePolicy      *string                `pulumi:"spotInstancePolicy"`
	State                   *string                `pulumi:"state"`
	Tags                    *SqlEndpointTags       `pulumi:"tags"`
}

// The set of arguments for constructing a SqlEndpoint resource.
type SqlEndpointArgs struct {
	AutoStopMins            pulumi.IntPtrInput
	Channel                 SqlEndpointChannelPtrInput
	ClusterSize             pulumi.StringInput
	DataSourceId            pulumi.StringPtrInput
	EnablePhoton            pulumi.BoolPtrInput
	EnableServerlessCompute pulumi.BoolPtrInput
	Id                      pulumi.StringPtrInput
	InstanceProfileArn      pulumi.StringPtrInput
	JdbcUrl                 pulumi.StringPtrInput
	MaxNumClusters          pulumi.IntPtrInput
	MinNumClusters          pulumi.IntPtrInput
	Name                    pulumi.StringPtrInput
	NumClusters             pulumi.IntPtrInput
	OdbcParams              SqlEndpointOdbcParamsPtrInput
	SpotInstancePolicy      pulumi.StringPtrInput
	State                   pulumi.StringPtrInput
	Tags                    SqlEndpointTagsPtrInput
}

func (SqlEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlEndpointArgs)(nil)).Elem()
}

type SqlEndpointInput interface {
	pulumi.Input

	ToSqlEndpointOutput() SqlEndpointOutput
	ToSqlEndpointOutputWithContext(ctx context.Context) SqlEndpointOutput
}

func (*SqlEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlEndpoint)(nil)).Elem()
}

func (i *SqlEndpoint) ToSqlEndpointOutput() SqlEndpointOutput {
	return i.ToSqlEndpointOutputWithContext(context.Background())
}

func (i *SqlEndpoint) ToSqlEndpointOutputWithContext(ctx context.Context) SqlEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlEndpointOutput)
}

// SqlEndpointArrayInput is an input type that accepts SqlEndpointArray and SqlEndpointArrayOutput values.
// You can construct a concrete instance of `SqlEndpointArrayInput` via:
//
//          SqlEndpointArray{ SqlEndpointArgs{...} }
type SqlEndpointArrayInput interface {
	pulumi.Input

	ToSqlEndpointArrayOutput() SqlEndpointArrayOutput
	ToSqlEndpointArrayOutputWithContext(context.Context) SqlEndpointArrayOutput
}

type SqlEndpointArray []SqlEndpointInput

func (SqlEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlEndpoint)(nil)).Elem()
}

func (i SqlEndpointArray) ToSqlEndpointArrayOutput() SqlEndpointArrayOutput {
	return i.ToSqlEndpointArrayOutputWithContext(context.Background())
}

func (i SqlEndpointArray) ToSqlEndpointArrayOutputWithContext(ctx context.Context) SqlEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlEndpointArrayOutput)
}

// SqlEndpointMapInput is an input type that accepts SqlEndpointMap and SqlEndpointMapOutput values.
// You can construct a concrete instance of `SqlEndpointMapInput` via:
//
//          SqlEndpointMap{ "key": SqlEndpointArgs{...} }
type SqlEndpointMapInput interface {
	pulumi.Input

	ToSqlEndpointMapOutput() SqlEndpointMapOutput
	ToSqlEndpointMapOutputWithContext(context.Context) SqlEndpointMapOutput
}

type SqlEndpointMap map[string]SqlEndpointInput

func (SqlEndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlEndpoint)(nil)).Elem()
}

func (i SqlEndpointMap) ToSqlEndpointMapOutput() SqlEndpointMapOutput {
	return i.ToSqlEndpointMapOutputWithContext(context.Background())
}

func (i SqlEndpointMap) ToSqlEndpointMapOutputWithContext(ctx context.Context) SqlEndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlEndpointMapOutput)
}

type SqlEndpointOutput struct{ *pulumi.OutputState }

func (SqlEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlEndpoint)(nil)).Elem()
}

func (o SqlEndpointOutput) ToSqlEndpointOutput() SqlEndpointOutput {
	return o
}

func (o SqlEndpointOutput) ToSqlEndpointOutputWithContext(ctx context.Context) SqlEndpointOutput {
	return o
}

type SqlEndpointArrayOutput struct{ *pulumi.OutputState }

func (SqlEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlEndpoint)(nil)).Elem()
}

func (o SqlEndpointArrayOutput) ToSqlEndpointArrayOutput() SqlEndpointArrayOutput {
	return o
}

func (o SqlEndpointArrayOutput) ToSqlEndpointArrayOutputWithContext(ctx context.Context) SqlEndpointArrayOutput {
	return o
}

func (o SqlEndpointArrayOutput) Index(i pulumi.IntInput) SqlEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SqlEndpoint {
		return vs[0].([]*SqlEndpoint)[vs[1].(int)]
	}).(SqlEndpointOutput)
}

type SqlEndpointMapOutput struct{ *pulumi.OutputState }

func (SqlEndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlEndpoint)(nil)).Elem()
}

func (o SqlEndpointMapOutput) ToSqlEndpointMapOutput() SqlEndpointMapOutput {
	return o
}

func (o SqlEndpointMapOutput) ToSqlEndpointMapOutputWithContext(ctx context.Context) SqlEndpointMapOutput {
	return o
}

func (o SqlEndpointMapOutput) MapIndex(k pulumi.StringInput) SqlEndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SqlEndpoint {
		return vs[0].(map[string]*SqlEndpoint)[vs[1].(string)]
	}).(SqlEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SqlEndpointInput)(nil)).Elem(), &SqlEndpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlEndpointArrayInput)(nil)).Elem(), SqlEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlEndpointMapInput)(nil)).Elem(), SqlEndpointMap{})
	pulumi.RegisterOutputType(SqlEndpointOutput{})
	pulumi.RegisterOutputType(SqlEndpointArrayOutput{})
	pulumi.RegisterOutputType(SqlEndpointMapOutput{})
}
