// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SqlDashboard struct {
	pulumi.CustomResourceState

	Name pulumi.StringOutput      `pulumi:"name"`
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewSqlDashboard registers a new resource with the given unique name, arguments, and options.
func NewSqlDashboard(ctx *pulumi.Context,
	name string, args *SqlDashboardArgs, opts ...pulumi.ResourceOption) (*SqlDashboard, error) {
	if args == nil {
		args = &SqlDashboardArgs{}
	}

	var resource SqlDashboard
	err := ctx.RegisterResource("databricks:index/sqlDashboard:SqlDashboard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlDashboard gets an existing SqlDashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlDashboard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlDashboardState, opts ...pulumi.ResourceOption) (*SqlDashboard, error) {
	var resource SqlDashboard
	err := ctx.ReadResource("databricks:index/sqlDashboard:SqlDashboard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlDashboard resources.
type sqlDashboardState struct {
	Name *string  `pulumi:"name"`
	Tags []string `pulumi:"tags"`
}

type SqlDashboardState struct {
	Name pulumi.StringPtrInput
	Tags pulumi.StringArrayInput
}

func (SqlDashboardState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlDashboardState)(nil)).Elem()
}

type sqlDashboardArgs struct {
	Name *string  `pulumi:"name"`
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a SqlDashboard resource.
type SqlDashboardArgs struct {
	Name pulumi.StringPtrInput
	Tags pulumi.StringArrayInput
}

func (SqlDashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlDashboardArgs)(nil)).Elem()
}

type SqlDashboardInput interface {
	pulumi.Input

	ToSqlDashboardOutput() SqlDashboardOutput
	ToSqlDashboardOutputWithContext(ctx context.Context) SqlDashboardOutput
}

func (*SqlDashboard) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlDashboard)(nil)).Elem()
}

func (i *SqlDashboard) ToSqlDashboardOutput() SqlDashboardOutput {
	return i.ToSqlDashboardOutputWithContext(context.Background())
}

func (i *SqlDashboard) ToSqlDashboardOutputWithContext(ctx context.Context) SqlDashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlDashboardOutput)
}

// SqlDashboardArrayInput is an input type that accepts SqlDashboardArray and SqlDashboardArrayOutput values.
// You can construct a concrete instance of `SqlDashboardArrayInput` via:
//
//          SqlDashboardArray{ SqlDashboardArgs{...} }
type SqlDashboardArrayInput interface {
	pulumi.Input

	ToSqlDashboardArrayOutput() SqlDashboardArrayOutput
	ToSqlDashboardArrayOutputWithContext(context.Context) SqlDashboardArrayOutput
}

type SqlDashboardArray []SqlDashboardInput

func (SqlDashboardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlDashboard)(nil)).Elem()
}

func (i SqlDashboardArray) ToSqlDashboardArrayOutput() SqlDashboardArrayOutput {
	return i.ToSqlDashboardArrayOutputWithContext(context.Background())
}

func (i SqlDashboardArray) ToSqlDashboardArrayOutputWithContext(ctx context.Context) SqlDashboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlDashboardArrayOutput)
}

// SqlDashboardMapInput is an input type that accepts SqlDashboardMap and SqlDashboardMapOutput values.
// You can construct a concrete instance of `SqlDashboardMapInput` via:
//
//          SqlDashboardMap{ "key": SqlDashboardArgs{...} }
type SqlDashboardMapInput interface {
	pulumi.Input

	ToSqlDashboardMapOutput() SqlDashboardMapOutput
	ToSqlDashboardMapOutputWithContext(context.Context) SqlDashboardMapOutput
}

type SqlDashboardMap map[string]SqlDashboardInput

func (SqlDashboardMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlDashboard)(nil)).Elem()
}

func (i SqlDashboardMap) ToSqlDashboardMapOutput() SqlDashboardMapOutput {
	return i.ToSqlDashboardMapOutputWithContext(context.Background())
}

func (i SqlDashboardMap) ToSqlDashboardMapOutputWithContext(ctx context.Context) SqlDashboardMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlDashboardMapOutput)
}

type SqlDashboardOutput struct{ *pulumi.OutputState }

func (SqlDashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlDashboard)(nil)).Elem()
}

func (o SqlDashboardOutput) ToSqlDashboardOutput() SqlDashboardOutput {
	return o
}

func (o SqlDashboardOutput) ToSqlDashboardOutputWithContext(ctx context.Context) SqlDashboardOutput {
	return o
}

type SqlDashboardArrayOutput struct{ *pulumi.OutputState }

func (SqlDashboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlDashboard)(nil)).Elem()
}

func (o SqlDashboardArrayOutput) ToSqlDashboardArrayOutput() SqlDashboardArrayOutput {
	return o
}

func (o SqlDashboardArrayOutput) ToSqlDashboardArrayOutputWithContext(ctx context.Context) SqlDashboardArrayOutput {
	return o
}

func (o SqlDashboardArrayOutput) Index(i pulumi.IntInput) SqlDashboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SqlDashboard {
		return vs[0].([]*SqlDashboard)[vs[1].(int)]
	}).(SqlDashboardOutput)
}

type SqlDashboardMapOutput struct{ *pulumi.OutputState }

func (SqlDashboardMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlDashboard)(nil)).Elem()
}

func (o SqlDashboardMapOutput) ToSqlDashboardMapOutput() SqlDashboardMapOutput {
	return o
}

func (o SqlDashboardMapOutput) ToSqlDashboardMapOutputWithContext(ctx context.Context) SqlDashboardMapOutput {
	return o
}

func (o SqlDashboardMapOutput) MapIndex(k pulumi.StringInput) SqlDashboardOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SqlDashboard {
		return vs[0].(map[string]*SqlDashboard)[vs[1].(string)]
	}).(SqlDashboardOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SqlDashboardInput)(nil)).Elem(), &SqlDashboard{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlDashboardArrayInput)(nil)).Elem(), SqlDashboardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlDashboardMapInput)(nil)).Elem(), SqlDashboardMap{})
	pulumi.RegisterOutputType(SqlDashboardOutput{})
	pulumi.RegisterOutputType(SqlDashboardArrayOutput{})
	pulumi.RegisterOutputType(SqlDashboardMapOutput{})
}
