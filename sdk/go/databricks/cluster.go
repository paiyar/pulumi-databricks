// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Cluster struct {
	pulumi.CustomResourceState

	Autoscale                 ClusterAutoscalePtrOutput       `pulumi:"autoscale"`
	AutoterminationMinutes    pulumi.IntPtrOutput             `pulumi:"autoterminationMinutes"`
	AwsAttributes             ClusterAwsAttributesPtrOutput   `pulumi:"awsAttributes"`
	AzureAttributes           ClusterAzureAttributesPtrOutput `pulumi:"azureAttributes"`
	ClusterId                 pulumi.StringOutput             `pulumi:"clusterId"`
	ClusterLogConf            ClusterClusterLogConfPtrOutput  `pulumi:"clusterLogConf"`
	ClusterName               pulumi.StringPtrOutput          `pulumi:"clusterName"`
	CustomTags                pulumi.MapOutput                `pulumi:"customTags"`
	DataSecurityMode          pulumi.StringPtrOutput          `pulumi:"dataSecurityMode"`
	DefaultTags               pulumi.MapOutput                `pulumi:"defaultTags"`
	DockerImage               ClusterDockerImagePtrOutput     `pulumi:"dockerImage"`
	DriverInstancePoolId      pulumi.StringOutput             `pulumi:"driverInstancePoolId"`
	DriverNodeTypeId          pulumi.StringOutput             `pulumi:"driverNodeTypeId"`
	EnableElasticDisk         pulumi.BoolOutput               `pulumi:"enableElasticDisk"`
	EnableLocalDiskEncryption pulumi.BoolOutput               `pulumi:"enableLocalDiskEncryption"`
	GcpAttributes             ClusterGcpAttributesPtrOutput   `pulumi:"gcpAttributes"`
	IdempotencyToken          pulumi.StringPtrOutput          `pulumi:"idempotencyToken"`
	InitScripts               ClusterInitScriptArrayOutput    `pulumi:"initScripts"`
	InstancePoolId            pulumi.StringPtrOutput          `pulumi:"instancePoolId"`
	IsPinned                  pulumi.BoolPtrOutput            `pulumi:"isPinned"`
	Libraries                 ClusterLibraryArrayOutput       `pulumi:"libraries"`
	NodeTypeId                pulumi.StringOutput             `pulumi:"nodeTypeId"`
	NumWorkers                pulumi.IntPtrOutput             `pulumi:"numWorkers"`
	PolicyId                  pulumi.StringPtrOutput          `pulumi:"policyId"`
	SingleUserName            pulumi.StringPtrOutput          `pulumi:"singleUserName"`
	SparkConf                 pulumi.MapOutput                `pulumi:"sparkConf"`
	SparkEnvVars              pulumi.MapOutput                `pulumi:"sparkEnvVars"`
	SparkVersion              pulumi.StringOutput             `pulumi:"sparkVersion"`
	SshPublicKeys             pulumi.StringArrayOutput        `pulumi:"sshPublicKeys"`
	State                     pulumi.StringOutput             `pulumi:"state"`
	Url                       pulumi.StringOutput             `pulumi:"url"`
	WorkloadType              ClusterWorkloadTypePtrOutput    `pulumi:"workloadType"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SparkVersion == nil {
		return nil, errors.New("invalid value for required argument 'SparkVersion'")
	}
	var resource Cluster
	err := ctx.RegisterResource("databricks:index/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("databricks:index/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	Autoscale                 *ClusterAutoscale       `pulumi:"autoscale"`
	AutoterminationMinutes    *int                    `pulumi:"autoterminationMinutes"`
	AwsAttributes             *ClusterAwsAttributes   `pulumi:"awsAttributes"`
	AzureAttributes           *ClusterAzureAttributes `pulumi:"azureAttributes"`
	ClusterId                 *string                 `pulumi:"clusterId"`
	ClusterLogConf            *ClusterClusterLogConf  `pulumi:"clusterLogConf"`
	ClusterName               *string                 `pulumi:"clusterName"`
	CustomTags                map[string]interface{}  `pulumi:"customTags"`
	DataSecurityMode          *string                 `pulumi:"dataSecurityMode"`
	DefaultTags               map[string]interface{}  `pulumi:"defaultTags"`
	DockerImage               *ClusterDockerImage     `pulumi:"dockerImage"`
	DriverInstancePoolId      *string                 `pulumi:"driverInstancePoolId"`
	DriverNodeTypeId          *string                 `pulumi:"driverNodeTypeId"`
	EnableElasticDisk         *bool                   `pulumi:"enableElasticDisk"`
	EnableLocalDiskEncryption *bool                   `pulumi:"enableLocalDiskEncryption"`
	GcpAttributes             *ClusterGcpAttributes   `pulumi:"gcpAttributes"`
	IdempotencyToken          *string                 `pulumi:"idempotencyToken"`
	InitScripts               []ClusterInitScript     `pulumi:"initScripts"`
	InstancePoolId            *string                 `pulumi:"instancePoolId"`
	IsPinned                  *bool                   `pulumi:"isPinned"`
	Libraries                 []ClusterLibrary        `pulumi:"libraries"`
	NodeTypeId                *string                 `pulumi:"nodeTypeId"`
	NumWorkers                *int                    `pulumi:"numWorkers"`
	PolicyId                  *string                 `pulumi:"policyId"`
	SingleUserName            *string                 `pulumi:"singleUserName"`
	SparkConf                 map[string]interface{}  `pulumi:"sparkConf"`
	SparkEnvVars              map[string]interface{}  `pulumi:"sparkEnvVars"`
	SparkVersion              *string                 `pulumi:"sparkVersion"`
	SshPublicKeys             []string                `pulumi:"sshPublicKeys"`
	State                     *string                 `pulumi:"state"`
	Url                       *string                 `pulumi:"url"`
	WorkloadType              *ClusterWorkloadType    `pulumi:"workloadType"`
}

type ClusterState struct {
	Autoscale                 ClusterAutoscalePtrInput
	AutoterminationMinutes    pulumi.IntPtrInput
	AwsAttributes             ClusterAwsAttributesPtrInput
	AzureAttributes           ClusterAzureAttributesPtrInput
	ClusterId                 pulumi.StringPtrInput
	ClusterLogConf            ClusterClusterLogConfPtrInput
	ClusterName               pulumi.StringPtrInput
	CustomTags                pulumi.MapInput
	DataSecurityMode          pulumi.StringPtrInput
	DefaultTags               pulumi.MapInput
	DockerImage               ClusterDockerImagePtrInput
	DriverInstancePoolId      pulumi.StringPtrInput
	DriverNodeTypeId          pulumi.StringPtrInput
	EnableElasticDisk         pulumi.BoolPtrInput
	EnableLocalDiskEncryption pulumi.BoolPtrInput
	GcpAttributes             ClusterGcpAttributesPtrInput
	IdempotencyToken          pulumi.StringPtrInput
	InitScripts               ClusterInitScriptArrayInput
	InstancePoolId            pulumi.StringPtrInput
	IsPinned                  pulumi.BoolPtrInput
	Libraries                 ClusterLibraryArrayInput
	NodeTypeId                pulumi.StringPtrInput
	NumWorkers                pulumi.IntPtrInput
	PolicyId                  pulumi.StringPtrInput
	SingleUserName            pulumi.StringPtrInput
	SparkConf                 pulumi.MapInput
	SparkEnvVars              pulumi.MapInput
	SparkVersion              pulumi.StringPtrInput
	SshPublicKeys             pulumi.StringArrayInput
	State                     pulumi.StringPtrInput
	Url                       pulumi.StringPtrInput
	WorkloadType              ClusterWorkloadTypePtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	Autoscale                 *ClusterAutoscale       `pulumi:"autoscale"`
	AutoterminationMinutes    *int                    `pulumi:"autoterminationMinutes"`
	AwsAttributes             *ClusterAwsAttributes   `pulumi:"awsAttributes"`
	AzureAttributes           *ClusterAzureAttributes `pulumi:"azureAttributes"`
	ClusterId                 *string                 `pulumi:"clusterId"`
	ClusterLogConf            *ClusterClusterLogConf  `pulumi:"clusterLogConf"`
	ClusterName               *string                 `pulumi:"clusterName"`
	CustomTags                map[string]interface{}  `pulumi:"customTags"`
	DataSecurityMode          *string                 `pulumi:"dataSecurityMode"`
	DockerImage               *ClusterDockerImage     `pulumi:"dockerImage"`
	DriverInstancePoolId      *string                 `pulumi:"driverInstancePoolId"`
	DriverNodeTypeId          *string                 `pulumi:"driverNodeTypeId"`
	EnableElasticDisk         *bool                   `pulumi:"enableElasticDisk"`
	EnableLocalDiskEncryption *bool                   `pulumi:"enableLocalDiskEncryption"`
	GcpAttributes             *ClusterGcpAttributes   `pulumi:"gcpAttributes"`
	IdempotencyToken          *string                 `pulumi:"idempotencyToken"`
	InitScripts               []ClusterInitScript     `pulumi:"initScripts"`
	InstancePoolId            *string                 `pulumi:"instancePoolId"`
	IsPinned                  *bool                   `pulumi:"isPinned"`
	Libraries                 []ClusterLibrary        `pulumi:"libraries"`
	NodeTypeId                *string                 `pulumi:"nodeTypeId"`
	NumWorkers                *int                    `pulumi:"numWorkers"`
	PolicyId                  *string                 `pulumi:"policyId"`
	SingleUserName            *string                 `pulumi:"singleUserName"`
	SparkConf                 map[string]interface{}  `pulumi:"sparkConf"`
	SparkEnvVars              map[string]interface{}  `pulumi:"sparkEnvVars"`
	SparkVersion              string                  `pulumi:"sparkVersion"`
	SshPublicKeys             []string                `pulumi:"sshPublicKeys"`
	WorkloadType              *ClusterWorkloadType    `pulumi:"workloadType"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	Autoscale                 ClusterAutoscalePtrInput
	AutoterminationMinutes    pulumi.IntPtrInput
	AwsAttributes             ClusterAwsAttributesPtrInput
	AzureAttributes           ClusterAzureAttributesPtrInput
	ClusterId                 pulumi.StringPtrInput
	ClusterLogConf            ClusterClusterLogConfPtrInput
	ClusterName               pulumi.StringPtrInput
	CustomTags                pulumi.MapInput
	DataSecurityMode          pulumi.StringPtrInput
	DockerImage               ClusterDockerImagePtrInput
	DriverInstancePoolId      pulumi.StringPtrInput
	DriverNodeTypeId          pulumi.StringPtrInput
	EnableElasticDisk         pulumi.BoolPtrInput
	EnableLocalDiskEncryption pulumi.BoolPtrInput
	GcpAttributes             ClusterGcpAttributesPtrInput
	IdempotencyToken          pulumi.StringPtrInput
	InitScripts               ClusterInitScriptArrayInput
	InstancePoolId            pulumi.StringPtrInput
	IsPinned                  pulumi.BoolPtrInput
	Libraries                 ClusterLibraryArrayInput
	NodeTypeId                pulumi.StringPtrInput
	NumWorkers                pulumi.IntPtrInput
	PolicyId                  pulumi.StringPtrInput
	SingleUserName            pulumi.StringPtrInput
	SparkConf                 pulumi.MapInput
	SparkEnvVars              pulumi.MapInput
	SparkVersion              pulumi.StringInput
	SshPublicKeys             pulumi.StringArrayInput
	WorkloadType              ClusterWorkloadTypePtrInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//          ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//          ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
