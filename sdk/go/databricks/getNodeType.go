// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetNodeType(ctx *pulumi.Context, args *GetNodeTypeArgs, opts ...pulumi.InvokeOption) (*GetNodeTypeResult, error) {
	var rv GetNodeTypeResult
	err := ctx.Invoke("databricks:index/getNodeType:getNodeType", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNodeType.
type GetNodeTypeArgs struct {
	Category              *string `pulumi:"category"`
	GbPerCore             *int    `pulumi:"gbPerCore"`
	Graviton              *bool   `pulumi:"graviton"`
	IsIoCacheEnabled      *bool   `pulumi:"isIoCacheEnabled"`
	LocalDisk             *bool   `pulumi:"localDisk"`
	MinCores              *int    `pulumi:"minCores"`
	MinGpus               *int    `pulumi:"minGpus"`
	MinMemoryGb           *int    `pulumi:"minMemoryGb"`
	PhotonDriverCapable   *bool   `pulumi:"photonDriverCapable"`
	PhotonWorkerCapable   *bool   `pulumi:"photonWorkerCapable"`
	SupportPortForwarding *bool   `pulumi:"supportPortForwarding"`
	Vcpu                  *bool   `pulumi:"vcpu"`
}

// A collection of values returned by getNodeType.
type GetNodeTypeResult struct {
	Category  *string `pulumi:"category"`
	GbPerCore *int    `pulumi:"gbPerCore"`
	Graviton  *bool   `pulumi:"graviton"`
	// The provider-assigned unique ID for this managed resource.
	Id                    string `pulumi:"id"`
	IsIoCacheEnabled      *bool  `pulumi:"isIoCacheEnabled"`
	LocalDisk             *bool  `pulumi:"localDisk"`
	MinCores              *int   `pulumi:"minCores"`
	MinGpus               *int   `pulumi:"minGpus"`
	MinMemoryGb           *int   `pulumi:"minMemoryGb"`
	PhotonDriverCapable   *bool  `pulumi:"photonDriverCapable"`
	PhotonWorkerCapable   *bool  `pulumi:"photonWorkerCapable"`
	SupportPortForwarding *bool  `pulumi:"supportPortForwarding"`
	Vcpu                  *bool  `pulumi:"vcpu"`
}

func GetNodeTypeOutput(ctx *pulumi.Context, args GetNodeTypeOutputArgs, opts ...pulumi.InvokeOption) GetNodeTypeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetNodeTypeResult, error) {
			args := v.(GetNodeTypeArgs)
			r, err := GetNodeType(ctx, &args, opts...)
			return *r, err
		}).(GetNodeTypeResultOutput)
}

// A collection of arguments for invoking getNodeType.
type GetNodeTypeOutputArgs struct {
	Category              pulumi.StringPtrInput `pulumi:"category"`
	GbPerCore             pulumi.IntPtrInput    `pulumi:"gbPerCore"`
	Graviton              pulumi.BoolPtrInput   `pulumi:"graviton"`
	IsIoCacheEnabled      pulumi.BoolPtrInput   `pulumi:"isIoCacheEnabled"`
	LocalDisk             pulumi.BoolPtrInput   `pulumi:"localDisk"`
	MinCores              pulumi.IntPtrInput    `pulumi:"minCores"`
	MinGpus               pulumi.IntPtrInput    `pulumi:"minGpus"`
	MinMemoryGb           pulumi.IntPtrInput    `pulumi:"minMemoryGb"`
	PhotonDriverCapable   pulumi.BoolPtrInput   `pulumi:"photonDriverCapable"`
	PhotonWorkerCapable   pulumi.BoolPtrInput   `pulumi:"photonWorkerCapable"`
	SupportPortForwarding pulumi.BoolPtrInput   `pulumi:"supportPortForwarding"`
	Vcpu                  pulumi.BoolPtrInput   `pulumi:"vcpu"`
}

func (GetNodeTypeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeTypeArgs)(nil)).Elem()
}

// A collection of values returned by getNodeType.
type GetNodeTypeResultOutput struct{ *pulumi.OutputState }

func (GetNodeTypeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeTypeResult)(nil)).Elem()
}

func (o GetNodeTypeResultOutput) ToGetNodeTypeResultOutput() GetNodeTypeResultOutput {
	return o
}

func (o GetNodeTypeResultOutput) ToGetNodeTypeResultOutputWithContext(ctx context.Context) GetNodeTypeResultOutput {
	return o
}

func (o GetNodeTypeResultOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodeTypeResult) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o GetNodeTypeResultOutput) GbPerCore() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetNodeTypeResult) *int { return v.GbPerCore }).(pulumi.IntPtrOutput)
}

func (o GetNodeTypeResultOutput) Graviton() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetNodeTypeResult) *bool { return v.Graviton }).(pulumi.BoolPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetNodeTypeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodeTypeResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetNodeTypeResultOutput) IsIoCacheEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetNodeTypeResult) *bool { return v.IsIoCacheEnabled }).(pulumi.BoolPtrOutput)
}

func (o GetNodeTypeResultOutput) LocalDisk() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetNodeTypeResult) *bool { return v.LocalDisk }).(pulumi.BoolPtrOutput)
}

func (o GetNodeTypeResultOutput) MinCores() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetNodeTypeResult) *int { return v.MinCores }).(pulumi.IntPtrOutput)
}

func (o GetNodeTypeResultOutput) MinGpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetNodeTypeResult) *int { return v.MinGpus }).(pulumi.IntPtrOutput)
}

func (o GetNodeTypeResultOutput) MinMemoryGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetNodeTypeResult) *int { return v.MinMemoryGb }).(pulumi.IntPtrOutput)
}

func (o GetNodeTypeResultOutput) PhotonDriverCapable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetNodeTypeResult) *bool { return v.PhotonDriverCapable }).(pulumi.BoolPtrOutput)
}

func (o GetNodeTypeResultOutput) PhotonWorkerCapable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetNodeTypeResult) *bool { return v.PhotonWorkerCapable }).(pulumi.BoolPtrOutput)
}

func (o GetNodeTypeResultOutput) SupportPortForwarding() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetNodeTypeResult) *bool { return v.SupportPortForwarding }).(pulumi.BoolPtrOutput)
}

func (o GetNodeTypeResultOutput) Vcpu() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetNodeTypeResult) *bool { return v.Vcpu }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNodeTypeResultOutput{})
}
