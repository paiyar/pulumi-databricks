// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Metastore struct {
	pulumi.CustomResourceState

	Cloud                                       pulumi.StringOutput    `pulumi:"cloud"`
	CreatedAt                                   pulumi.IntOutput       `pulumi:"createdAt"`
	CreatedBy                                   pulumi.StringOutput    `pulumi:"createdBy"`
	DefaultDataAccessConfigId                   pulumi.StringPtrOutput `pulumi:"defaultDataAccessConfigId"`
	DeltaSharingOrganizationName                pulumi.StringPtrOutput `pulumi:"deltaSharingOrganizationName"`
	DeltaSharingRecipientTokenLifetimeInSeconds pulumi.IntPtrOutput    `pulumi:"deltaSharingRecipientTokenLifetimeInSeconds"`
	DeltaSharingScope                           pulumi.StringPtrOutput `pulumi:"deltaSharingScope"`
	ForceDestroy                                pulumi.BoolPtrOutput   `pulumi:"forceDestroy"`
	GlobalMetastoreId                           pulumi.StringOutput    `pulumi:"globalMetastoreId"`
	Name                                        pulumi.StringOutput    `pulumi:"name"`
	Owner                                       pulumi.StringOutput    `pulumi:"owner"`
	Region                                      pulumi.StringOutput    `pulumi:"region"`
	StorageRoot                                 pulumi.StringOutput    `pulumi:"storageRoot"`
	UpdatedAt                                   pulumi.IntOutput       `pulumi:"updatedAt"`
	UpdatedBy                                   pulumi.StringOutput    `pulumi:"updatedBy"`
}

// NewMetastore registers a new resource with the given unique name, arguments, and options.
func NewMetastore(ctx *pulumi.Context,
	name string, args *MetastoreArgs, opts ...pulumi.ResourceOption) (*Metastore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StorageRoot == nil {
		return nil, errors.New("invalid value for required argument 'StorageRoot'")
	}
	var resource Metastore
	err := ctx.RegisterResource("databricks:index/metastore:Metastore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetastore gets an existing Metastore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetastore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetastoreState, opts ...pulumi.ResourceOption) (*Metastore, error) {
	var resource Metastore
	err := ctx.ReadResource("databricks:index/metastore:Metastore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Metastore resources.
type metastoreState struct {
	Cloud                                       *string `pulumi:"cloud"`
	CreatedAt                                   *int    `pulumi:"createdAt"`
	CreatedBy                                   *string `pulumi:"createdBy"`
	DefaultDataAccessConfigId                   *string `pulumi:"defaultDataAccessConfigId"`
	DeltaSharingOrganizationName                *string `pulumi:"deltaSharingOrganizationName"`
	DeltaSharingRecipientTokenLifetimeInSeconds *int    `pulumi:"deltaSharingRecipientTokenLifetimeInSeconds"`
	DeltaSharingScope                           *string `pulumi:"deltaSharingScope"`
	ForceDestroy                                *bool   `pulumi:"forceDestroy"`
	GlobalMetastoreId                           *string `pulumi:"globalMetastoreId"`
	Name                                        *string `pulumi:"name"`
	Owner                                       *string `pulumi:"owner"`
	Region                                      *string `pulumi:"region"`
	StorageRoot                                 *string `pulumi:"storageRoot"`
	UpdatedAt                                   *int    `pulumi:"updatedAt"`
	UpdatedBy                                   *string `pulumi:"updatedBy"`
}

type MetastoreState struct {
	Cloud                                       pulumi.StringPtrInput
	CreatedAt                                   pulumi.IntPtrInput
	CreatedBy                                   pulumi.StringPtrInput
	DefaultDataAccessConfigId                   pulumi.StringPtrInput
	DeltaSharingOrganizationName                pulumi.StringPtrInput
	DeltaSharingRecipientTokenLifetimeInSeconds pulumi.IntPtrInput
	DeltaSharingScope                           pulumi.StringPtrInput
	ForceDestroy                                pulumi.BoolPtrInput
	GlobalMetastoreId                           pulumi.StringPtrInput
	Name                                        pulumi.StringPtrInput
	Owner                                       pulumi.StringPtrInput
	Region                                      pulumi.StringPtrInput
	StorageRoot                                 pulumi.StringPtrInput
	UpdatedAt                                   pulumi.IntPtrInput
	UpdatedBy                                   pulumi.StringPtrInput
}

func (MetastoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*metastoreState)(nil)).Elem()
}

type metastoreArgs struct {
	Cloud                                       *string `pulumi:"cloud"`
	CreatedAt                                   *int    `pulumi:"createdAt"`
	CreatedBy                                   *string `pulumi:"createdBy"`
	DefaultDataAccessConfigId                   *string `pulumi:"defaultDataAccessConfigId"`
	DeltaSharingOrganizationName                *string `pulumi:"deltaSharingOrganizationName"`
	DeltaSharingRecipientTokenLifetimeInSeconds *int    `pulumi:"deltaSharingRecipientTokenLifetimeInSeconds"`
	DeltaSharingScope                           *string `pulumi:"deltaSharingScope"`
	ForceDestroy                                *bool   `pulumi:"forceDestroy"`
	GlobalMetastoreId                           *string `pulumi:"globalMetastoreId"`
	Name                                        *string `pulumi:"name"`
	Owner                                       *string `pulumi:"owner"`
	Region                                      *string `pulumi:"region"`
	StorageRoot                                 string  `pulumi:"storageRoot"`
	UpdatedAt                                   *int    `pulumi:"updatedAt"`
	UpdatedBy                                   *string `pulumi:"updatedBy"`
}

// The set of arguments for constructing a Metastore resource.
type MetastoreArgs struct {
	Cloud                                       pulumi.StringPtrInput
	CreatedAt                                   pulumi.IntPtrInput
	CreatedBy                                   pulumi.StringPtrInput
	DefaultDataAccessConfigId                   pulumi.StringPtrInput
	DeltaSharingOrganizationName                pulumi.StringPtrInput
	DeltaSharingRecipientTokenLifetimeInSeconds pulumi.IntPtrInput
	DeltaSharingScope                           pulumi.StringPtrInput
	ForceDestroy                                pulumi.BoolPtrInput
	GlobalMetastoreId                           pulumi.StringPtrInput
	Name                                        pulumi.StringPtrInput
	Owner                                       pulumi.StringPtrInput
	Region                                      pulumi.StringPtrInput
	StorageRoot                                 pulumi.StringInput
	UpdatedAt                                   pulumi.IntPtrInput
	UpdatedBy                                   pulumi.StringPtrInput
}

func (MetastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metastoreArgs)(nil)).Elem()
}

type MetastoreInput interface {
	pulumi.Input

	ToMetastoreOutput() MetastoreOutput
	ToMetastoreOutputWithContext(ctx context.Context) MetastoreOutput
}

func (*Metastore) ElementType() reflect.Type {
	return reflect.TypeOf((**Metastore)(nil)).Elem()
}

func (i *Metastore) ToMetastoreOutput() MetastoreOutput {
	return i.ToMetastoreOutputWithContext(context.Background())
}

func (i *Metastore) ToMetastoreOutputWithContext(ctx context.Context) MetastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreOutput)
}

// MetastoreArrayInput is an input type that accepts MetastoreArray and MetastoreArrayOutput values.
// You can construct a concrete instance of `MetastoreArrayInput` via:
//
//          MetastoreArray{ MetastoreArgs{...} }
type MetastoreArrayInput interface {
	pulumi.Input

	ToMetastoreArrayOutput() MetastoreArrayOutput
	ToMetastoreArrayOutputWithContext(context.Context) MetastoreArrayOutput
}

type MetastoreArray []MetastoreInput

func (MetastoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Metastore)(nil)).Elem()
}

func (i MetastoreArray) ToMetastoreArrayOutput() MetastoreArrayOutput {
	return i.ToMetastoreArrayOutputWithContext(context.Background())
}

func (i MetastoreArray) ToMetastoreArrayOutputWithContext(ctx context.Context) MetastoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreArrayOutput)
}

// MetastoreMapInput is an input type that accepts MetastoreMap and MetastoreMapOutput values.
// You can construct a concrete instance of `MetastoreMapInput` via:
//
//          MetastoreMap{ "key": MetastoreArgs{...} }
type MetastoreMapInput interface {
	pulumi.Input

	ToMetastoreMapOutput() MetastoreMapOutput
	ToMetastoreMapOutputWithContext(context.Context) MetastoreMapOutput
}

type MetastoreMap map[string]MetastoreInput

func (MetastoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Metastore)(nil)).Elem()
}

func (i MetastoreMap) ToMetastoreMapOutput() MetastoreMapOutput {
	return i.ToMetastoreMapOutputWithContext(context.Background())
}

func (i MetastoreMap) ToMetastoreMapOutputWithContext(ctx context.Context) MetastoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreMapOutput)
}

type MetastoreOutput struct{ *pulumi.OutputState }

func (MetastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Metastore)(nil)).Elem()
}

func (o MetastoreOutput) ToMetastoreOutput() MetastoreOutput {
	return o
}

func (o MetastoreOutput) ToMetastoreOutputWithContext(ctx context.Context) MetastoreOutput {
	return o
}

type MetastoreArrayOutput struct{ *pulumi.OutputState }

func (MetastoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Metastore)(nil)).Elem()
}

func (o MetastoreArrayOutput) ToMetastoreArrayOutput() MetastoreArrayOutput {
	return o
}

func (o MetastoreArrayOutput) ToMetastoreArrayOutputWithContext(ctx context.Context) MetastoreArrayOutput {
	return o
}

func (o MetastoreArrayOutput) Index(i pulumi.IntInput) MetastoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Metastore {
		return vs[0].([]*Metastore)[vs[1].(int)]
	}).(MetastoreOutput)
}

type MetastoreMapOutput struct{ *pulumi.OutputState }

func (MetastoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Metastore)(nil)).Elem()
}

func (o MetastoreMapOutput) ToMetastoreMapOutput() MetastoreMapOutput {
	return o
}

func (o MetastoreMapOutput) ToMetastoreMapOutputWithContext(ctx context.Context) MetastoreMapOutput {
	return o
}

func (o MetastoreMapOutput) MapIndex(k pulumi.StringInput) MetastoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Metastore {
		return vs[0].(map[string]*Metastore)[vs[1].(string)]
	}).(MetastoreOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetastoreInput)(nil)).Elem(), &Metastore{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetastoreArrayInput)(nil)).Elem(), MetastoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetastoreMapInput)(nil)).Elem(), MetastoreMap{})
	pulumi.RegisterOutputType(MetastoreOutput{})
	pulumi.RegisterOutputType(MetastoreArrayOutput{})
	pulumi.RegisterOutputType(MetastoreMapOutput{})
}
